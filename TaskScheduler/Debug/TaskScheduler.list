
TaskScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b54  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08001d04  08001d04  00011d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e70  08001e70  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08001e70  08001e70  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e70  08001e70  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e70  08001e70  00011e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e74  08001e74  00011e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08001e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000048  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  00020084  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bef  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024eb  00000000  00000000  00030c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000300  00000000  00000000  00033188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000258  00000000  00000000  00033488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000680d  00000000  00000000  000336e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000614b  00000000  00000000  00039eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0001391d  00000000  00000000  00040038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00053955  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001348  00000000  00000000  000539a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001cec 	.word	0x08001cec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08001cec 	.word	0x08001cec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <_ZN6Faults13enable_faultsEv>:
#include "faults.h"


namespace Faults {
	void enable_faults()
	{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
		uint32_t volatile *pSHCSR = (uint32_t*)0xE000ED24;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <_ZN6Faults13enable_faultsEv+0x20>)
 8000298:	607b      	str	r3, [r7, #4]
		*pSHCSR |= (1 << 16) | (1 << 17) | (1 << 18);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f443 22e0 	orr.w	r2, r3, #458752	; 0x70000
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	601a      	str	r2, [r3, #0]
	}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	e000ed24 	.word	0xe000ed24

080002b4 <HardFault_Handler>:
}

#ifdef __cplusplus
	extern "C" {
		void HardFault_Handler()
		{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
			printf("Hardfault\n");
 80002b8:	4801      	ldr	r0, [pc, #4]	; (80002c0 <HardFault_Handler+0xc>)
 80002ba:	f000 fe39 	bl	8000f30 <puts>
			while(1);
 80002be:	e7fe      	b.n	80002be <HardFault_Handler+0xa>
 80002c0:	08001d04 	.word	0x08001d04

080002c4 <MemManage_Handler>:
		}

		void MemManage_Handler()
		{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
			printf("Memory Manage Fault\n");
 80002c8:	4801      	ldr	r0, [pc, #4]	; (80002d0 <MemManage_Handler+0xc>)
 80002ca:	f000 fe31 	bl	8000f30 <puts>
			while(1);
 80002ce:	e7fe      	b.n	80002ce <MemManage_Handler+0xa>
 80002d0:	08001d10 	.word	0x08001d10

080002d4 <BusFault_Handler>:
		}

		void BusFault_Handler()
		{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
			printf("Bus Fault\n");
 80002d8:	4801      	ldr	r0, [pc, #4]	; (80002e0 <BusFault_Handler+0xc>)
 80002da:	f000 fe29 	bl	8000f30 <puts>
			while(1);
 80002de:	e7fe      	b.n	80002de <BusFault_Handler+0xa>
 80002e0:	08001d24 	.word	0x08001d24

080002e4 <UsageFault_Handler>:
		}

		void UsageFault_Handler()
		{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
			printf("Usage Fault\n");
 80002e8:	4801      	ldr	r0, [pc, #4]	; (80002f0 <UsageFault_Handler+0xc>)
 80002ea:	f000 fe21 	bl	8000f30 <puts>
			while(1);
 80002ee:	e7fe      	b.n	80002ee <UsageFault_Handler+0xa>
 80002f0:	08001d30 	.word	0x08001d30

080002f4 <_ZN3Led13init_all_ledsEv>:

#include "led.h"

namespace Led {
	void init_all_leds()
	{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
		uint32_t volatile *rcc = (uint32_t*)0x40023830;
 80002fa:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <_ZN3Led13init_all_ledsEv+0x30>)
 80002fc:	607b      	str	r3, [r7, #4]
		uint32_t volatile *mode = (uint32_t*)0x40020C00;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <_ZN3Led13init_all_ledsEv+0x34>)
 8000300:	603b      	str	r3, [r7, #0]

		*rcc |= (1 << 3);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f043 0208 	orr.w	r2, r3, #8
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
		*mode |= (1 << 24) | (1 << 26) | (1 << 28) | (1 << 30);
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f043 42aa 	orr.w	r2, r3, #1426063360	; 0x55000000
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	601a      	str	r2, [r3, #0]
	}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	40023830 	.word	0x40023830
 8000328:	40020c00 	.word	0x40020c00

0800032c <_ZN3Led6led_onEm>:

	void led_on(uint32_t color)
	{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
		uint32_t volatile *led = (uint32_t*)0x40020C14;
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <_ZN3Led6led_onEm+0x28>)
 8000336:	60fb      	str	r3, [r7, #12]
		*led ^= 1 << color ;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2101      	movs	r1, #1
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	405a      	eors	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	601a      	str	r2, [r3, #0]
	}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	40020c14 	.word	0x40020c14

08000358 <_ZN3Led5delayEm>:

	void delay(uint32_t divisor)
	{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
		for(size_t i = 0; i < (divisor * 100000); i++);
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <_ZN3Led5delayEm+0x2c>)
 8000368:	fb02 f303 	mul.w	r3, r2, r3
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	429a      	cmp	r2, r3
 8000370:	d203      	bcs.n	800037a <_ZN3Led5delayEm+0x22>
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	3301      	adds	r3, #1
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	e7f4      	b.n	8000364 <_ZN3Led5delayEm+0xc>
	}
 800037a:	bf00      	nop
 800037c:	3714      	adds	r7, #20
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	000186a0 	.word	0x000186a0

08000388 <main>:
#include "timers.h"
#include "usart.h"
#include "stm32f407xx.h"

int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08c      	sub	sp, #48	; 0x30
 800038c:	af00      	add	r7, sp, #0
	Usart usart3 = Usart(USART3);
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2102      	movs	r1, #2
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fa94 	bl	80008c0 <_ZN5UsartC1E7USART_t>
	usart3.puts("Usart3 enabled\n\r");
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	490c      	ldr	r1, [pc, #48]	; (80003cc <main+0x44>)
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fbc2 	bl	8000b26 <_ZN5Usart4putsEPKc>
	Led::init_all_leds();
 80003a2:	f7ff ffa7 	bl	80002f4 <_ZN3Led13init_all_ledsEv>
//	Timer::init_tim4();
	Faults::enable_faults();
 80003a6:	f7ff ff73 	bl	8000290 <_ZN6Faults13enable_faultsEv>

	Stacks::init_scheduler_stack(SCHED_STACK_START);
 80003aa:	4809      	ldr	r0, [pc, #36]	; (80003d0 <main+0x48>)
 80003ac:	f000 f861 	bl	8000472 <_ZN6Stacks20init_scheduler_stackEm>
	Stacks::init_task_stack();
 80003b0:	f000 f864 	bl	800047c <_ZN6Stacks15init_task_stackEv>

	Systick::init(TICK_HZ);
 80003b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b8:	f000 f9b0 	bl	800071c <_ZN7Systick4initEm>

	switch_to_psp();
 80003bc:	f000 f84c 	bl	8000458 <switch_to_psp>
	Tasks::tasks_uart(USART3);
 80003c0:	2002      	movs	r0, #2
 80003c2:	f000 f9eb 	bl	800079c <_ZN5Tasks10tasks_uartE7USART_t>
	Tasks::task_one_handler();
 80003c6:	f000 fa01 	bl	80007cc <_ZN5Tasks16task_one_handlerEv>
    /* Loop forever */
	for(;;);
 80003ca:	e7fe      	b.n	80003ca <main+0x42>
 80003cc:	08001d3c 	.word	0x08001d3c
 80003d0:	2001f000 	.word	0x2001f000

080003d4 <get_psp_value>:

#ifdef __cplusplus
extern "C" {

	uint32_t get_psp_value(void)
	{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
		return psp_of_tasks[current_task];
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <get_psp_value+0x18>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4619      	mov	r1, r3
 80003de:	4804      	ldr	r0, [pc, #16]	; (80003f0 <get_psp_value+0x1c>)
 80003e0:	f000 f898 	bl	8000514 <_ZNSt5arrayImLj4EEixEj>
 80003e4:	4603      	mov	r3, r0
 80003e6:	681b      	ldr	r3, [r3, #0]
	}
 80003e8:	4618      	mov	r0, r3
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200000a0 	.word	0x200000a0
 80003f0:	20000000 	.word	0x20000000

080003f4 <save_psp_value>:

	void save_psp_value(uint32_t current_psp)
	{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
		psp_of_tasks[current_task] = current_psp;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <save_psp_value+0x24>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
 8000402:	4806      	ldr	r0, [pc, #24]	; (800041c <save_psp_value+0x28>)
 8000404:	f000 f886 	bl	8000514 <_ZNSt5arrayImLj4EEixEj>
 8000408:	4602      	mov	r2, r0
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6013      	str	r3, [r2, #0]
	}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200000a0 	.word	0x200000a0
 800041c:	20000000 	.word	0x20000000

08000420 <update_next_task>:

	void update_next_task(void)
	{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
		current_task++;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <update_next_task+0x30>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	b2da      	uxtb	r2, r3
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <update_next_task+0x30>)
 800042e:	701a      	strb	r2, [r3, #0]
		current_task = current_task % MAX_TASKS;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <update_next_task+0x30>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	f003 0303 	and.w	r3, r3, #3
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <update_next_task+0x30>)
 800043c:	701a      	strb	r2, [r3, #0]
		printf("current task: %d\n", current_task);
 800043e:	4b04      	ldr	r3, [pc, #16]	; (8000450 <update_next_task+0x30>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	4619      	mov	r1, r3
 8000444:	4803      	ldr	r0, [pc, #12]	; (8000454 <update_next_task+0x34>)
 8000446:	f000 fced 	bl	8000e24 <iprintf>
	}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	200000a0 	.word	0x200000a0
 8000454:	08001d50 	.word	0x08001d50

08000458 <switch_to_psp>:

	__attribute__((naked)) void switch_to_psp()
	{
		//Save Link register
		__asm volatile ("PUSH {LR}");
 8000458:	b500      	push	{lr}

		//get psp value
		__asm volatile ("BL get_psp_value");
 800045a:	f7ff ffbb 	bl	80003d4 <get_psp_value>
		//return value of get_psp_value is in R0. Initializes PSP to address of task
		__asm volatile ("MSR PSP,R0");
 800045e:	f380 8809 	msr	PSP, r0

		//restore link register value to be able to return from this functions
		__asm volatile("POP {LR}");
 8000462:	f85d eb04 	ldr.w	lr, [sp], #4

		//change stack pointer from MSP to PSP
		__asm volatile ("MOV R0,#0X02");
 8000466:	f04f 0002 	mov.w	r0, #2
		__asm volatile ("MSR CONTROL,R0");
 800046a:	f380 8814 	msr	CONTROL, r0

		//return
		__asm volatile("BX LR");
 800046e:	4770      	bx	lr
	}
 8000470:	bf00      	nop

08000472 <_ZN6Stacks20init_scheduler_stackEm>:
}
#endif

namespace Stacks {
	__attribute__((naked)) void init_scheduler_stack(uint32_t sched_stack_start)
	{
 8000472:	4603      	mov	r3, r0
		__asm volatile("MSR MSP,%0" : : "r"(sched_stack_start) : );
 8000474:	f383 8808 	msr	MSP, r3
		__asm volatile("BX LR");
 8000478:	4770      	bx	lr
	}
 800047a:	bf00      	nop

0800047c <_ZN6Stacks15init_task_stackEv>:

	void init_task_stack(void)
	{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
		uint32_t *pPSP = NULL;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]

		for(size_t i = 0; i < MAX_TASKS; i++)
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	2b03      	cmp	r3, #3
 800048e:	d839      	bhi.n	8000504 <_ZN6Stacks15init_task_stackEv+0x88>
		{
			//stack is full descending, so set register then decremement
			pPSP = (uint32_t*)psp_of_tasks[i];    //stack pointer. No dereference, because this is the location in memory of task stack
 8000490:	68b9      	ldr	r1, [r7, #8]
 8000492:	481e      	ldr	r0, [pc, #120]	; (800050c <_ZN6Stacks15init_task_stackEv+0x90>)
 8000494:	f000 f83e 	bl	8000514 <_ZNSt5arrayImLj4EEixEj>
 8000498:	4603      	mov	r3, r0
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	60fb      	str	r3, [r7, #12]

			pPSP--;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	3b04      	subs	r3, #4
 80004a2:	60fb      	str	r3, [r7, #12]
			*pPSP = DUMMY_XPSR;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004aa:	601a      	str	r2, [r3, #0]

			pPSP--;// Program Counter
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3b04      	subs	r3, #4
 80004b0:	60fb      	str	r3, [r7, #12]
			*pPSP = task_handlers[i]; //must be odd number address
 80004b2:	68b9      	ldr	r1, [r7, #8]
 80004b4:	4816      	ldr	r0, [pc, #88]	; (8000510 <_ZN6Stacks15init_task_stackEv+0x94>)
 80004b6:	f000 f82d 	bl	8000514 <_ZNSt5arrayImLj4EEixEj>
 80004ba:	4603      	mov	r3, r0
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	601a      	str	r2, [r3, #0]

			pPSP--; //Link Register
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	3b04      	subs	r3, #4
 80004c6:	60fb      	str	r3, [r7, #12]
			*pPSP = 0xFFFFFFFD;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f06f 0202 	mvn.w	r2, #2
 80004ce:	601a      	str	r2, [r3, #0]

			for(size_t j = 0; j < 13; j++){
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b0c      	cmp	r3, #12
 80004d8:	d809      	bhi.n	80004ee <_ZN6Stacks15init_task_stackEv+0x72>
				pPSP--; //Set R0-R12 to zero
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	3b04      	subs	r3, #4
 80004de:	60fb      	str	r3, [r7, #12]
				*pPSP = 0;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
			for(size_t j = 0; j < 13; j++){
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3301      	adds	r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	e7f2      	b.n	80004d4 <_ZN6Stacks15init_task_stackEv+0x58>
			}

			//save value of psp
			psp_of_tasks[i] = (uint32_t)pPSP;
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	4806      	ldr	r0, [pc, #24]	; (800050c <_ZN6Stacks15init_task_stackEv+0x90>)
 80004f2:	f000 f80f 	bl	8000514 <_ZNSt5arrayImLj4EEixEj>
 80004f6:	4602      	mov	r2, r0
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	6013      	str	r3, [r2, #0]
		for(size_t i = 0; i < MAX_TASKS; i++)
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	3301      	adds	r3, #1
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	e7c2      	b.n	800048a <_ZN6Stacks15init_task_stackEv+0xe>
		}
	}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000000 	.word	0x20000000
 8000510:	20000010 	.word	0x20000010

08000514 <_ZNSt5arrayImLj4EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6839      	ldr	r1, [r7, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f805 	bl	8000532 <_ZNSt14__array_traitsImLj4EE6_S_refERA4_Kmj>
 8000528:	4603      	mov	r3, r0
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <_ZNSt14__array_traitsImLj4EE6_S_refERA4_Kmj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	4413      	add	r3, r2
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
	...

08000550 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <ITM_SendChar+0x44>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <ITM_SendChar+0x44>)
 8000560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000564:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <ITM_SendChar+0x48>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <ITM_SendChar+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000572:	bf00      	nop
 8000574:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f8      	beq.n	8000574 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000582:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	e000edfc 	.word	0xe000edfc
 8000598:	e0000e00 	.word	0xe0000e00

0800059c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	return 1;
 80005a0:	2301      	movs	r3, #1
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <_kill>:

int _kill(int pid, int sig)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80005b4:	f000 fb4c 	bl	8000c50 <__errno>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2216      	movs	r2, #22
 80005bc:	601a      	str	r2, [r3, #0]
	return -1;
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <_exit>:

void _exit (int status)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80005d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ffe7 	bl	80005aa <_kill>
	while (1) {}		/* Make sure we hang here */
 80005dc:	e7fe      	b.n	80005dc <_exit+0x12>

080005de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b086      	sub	sp, #24
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	60f8      	str	r0, [r7, #12]
 80005e6:	60b9      	str	r1, [r7, #8]
 80005e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e00a      	b.n	8000606 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005f0:	f3af 8000 	nop.w
 80005f4:	4601      	mov	r1, r0
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	60ba      	str	r2, [r7, #8]
 80005fc:	b2ca      	uxtb	r2, r1
 80005fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	3301      	adds	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	429a      	cmp	r2, r3
 800060c:	dbf0      	blt.n	80005f0 <_read+0x12>
	}

return len;
 800060e:	687b      	ldr	r3, [r7, #4]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e009      	b.n	800063e <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	60ba      	str	r2, [r7, #8]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff8c 	bl	8000550 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbf1      	blt.n	800062a <_write+0x12>
	}
	return len;
 8000646:	687b      	ldr	r3, [r7, #4]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <_close>:

int _close(int file)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	return -1;
 8000658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000676:	605a      	str	r2, [r3, #4]
	return 0;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <_isatty>:

int _isatty(int file)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	return 1;
 800068c:	2301      	movs	r3, #1
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
	return 0;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b8:	4a14      	ldr	r2, [pc, #80]	; (800070c <_sbrk+0x5c>)
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <_sbrk+0x60>)
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d102      	bne.n	80006d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <_sbrk+0x64>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <_sbrk+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	693a      	ldr	r2, [r7, #16]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d207      	bcs.n	80006f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e0:	f000 fab6 	bl	8000c50 <__errno>
 80006e4:	4603      	mov	r3, r0
 80006e6:	220c      	movs	r2, #12
 80006e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ee:	e009      	b.n	8000704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <_sbrk+0x64>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a05      	ldr	r2, [pc, #20]	; (8000714 <_sbrk+0x64>)
 8000700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000702:	68fb      	ldr	r3, [r7, #12]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20020000 	.word	0x20020000
 8000710:	00000400 	.word	0x00000400
 8000714:	200000a4 	.word	0x200000a4
 8000718:	200000d0 	.word	0x200000d0

0800071c <_ZN7Systick4initEm>:
#include "systick.h"
#include "stack.h"

namespace Systick {
	void init(uint32_t tick_hz)
	{
 800071c:	b480      	push	{r7}
 800071e:	b087      	sub	sp, #28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
		uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <_ZN7Systick4initEm+0x4c>)
 8000726:	617b      	str	r3, [r7, #20]
		uint32_t *pCSR  = (uint32_t*)0xE000E010;
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <_ZN7Systick4initEm+0x50>)
 800072a:	613b      	str	r3, [r7, #16]
		uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 800072c:	4a10      	ldr	r2, [pc, #64]	; (8000770 <_ZN7Systick4initEm+0x54>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	fbb2 f3f3 	udiv	r3, r2, r3
 8000734:	3b01      	subs	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]

		*pSRVR &= ~0xFFFFFF;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	601a      	str	r2, [r3, #0]
		*pSRVR |= count_value;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	431a      	orrs	r2, r3
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	601a      	str	r2, [r3, #0]

		*pCSR |= 1 << 2 | 1 << 1 | 1 << 0;
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f043 0207 	orr.w	r2, r3, #7
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	601a      	str	r2, [r3, #0]
	}
 800075c:	bf00      	nop
 800075e:	371c      	adds	r7, #28
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000e014 	.word	0xe000e014
 800076c:	e000e010 	.word	0xe000e010
 8000770:	00f42400 	.word	0x00f42400

08000774 <SysTick_Handler>:

extern "C" {
	__attribute__((naked)) void SysTick_Handler()
	{
		//get current running tasks psp value
		__asm volatile("MRS R0,PSP");
 8000774:	f3ef 8009 	mrs	r0, PSP

		//store decremnt before. Starts at R0 (which has psp value currently) and stores registers
		__asm volatile("STMDB R0!,{R4-R11}");
 8000778:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		//save content of LR
		__asm volatile("PUSH {LR}");
 800077c:	b500      	push	{lr}

		//save the current value of psp. stack is stored in previous instruction, psp value in in R0
		__asm volatile("BL save_psp_value");
 800077e:	f7ff fe39 	bl	80003f4 <save_psp_value>
		/**************************************************
		 *               CONTEXT SWITCHED                 *
		 * ************************************************/

		//retrive context of next task
		__asm volatile("BL update_next_task");
 8000782:	f7ff fe4d 	bl	8000420 <update_next_task>

		//get next tasks past psp value
		__asm volatile("BL get_psp_value");
 8000786:	f7ff fe25 	bl	80003d4 <get_psp_value>

		//using next task psp value retreive new stack frame from R4-R11
		__asm volatile("LDMIA R0!,{R4-R11}");
 800078a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		//update psp with value in r0
		__asm volatile("MSR PSP,R0");
 800078e:	f380 8809 	msr	PSP, r0

		//restore LR
		__asm volatile("POP {LR}");
 8000792:	f85d eb04 	ldr.w	lr, [sp], #4

		//return
		__asm volatile("BX LR");
 8000796:	4770      	bx	lr
	}
 8000798:	bf00      	nop
	...

0800079c <_ZN5Tasks10tasks_uartE7USART_t>:
#include "timers.h"

namespace Tasks {
	Usart *usart;
	void tasks_uart(USART_t usart)
	{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
		Tasks::usart = new Usart(usart);
 80007a6:	202c      	movs	r0, #44	; 0x2c
 80007a8:	f000 fa2f 	bl	8000c0a <_Znwj>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461c      	mov	r4, r3
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4620      	mov	r0, r4
 80007b6:	f000 f883 	bl	80008c0 <_ZN5UsartC1E7USART_t>
 80007ba:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <_ZN5Tasks10tasks_uartE7USART_t+0x2c>)
 80007bc:	601c      	str	r4, [r3, #0]
	}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000a8 	.word	0x200000a8

080007cc <_ZN5Tasks16task_one_handlerEv>:

	void task_one_handler()
	{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
		while(1)
		{
			Led::delay(10);
 80007d0:	200a      	movs	r0, #10
 80007d2:	f7ff fdc1 	bl	8000358 <_ZN3Led5delayEm>
			Led::led_on(RED);
 80007d6:	200e      	movs	r0, #14
 80007d8:	f7ff fda8 	bl	800032c <_ZN3Led6led_onEm>
			Tasks::usart->puts("Task One\n\r");
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <_ZN5Tasks16task_one_handlerEv+0x24>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4904      	ldr	r1, [pc, #16]	; (80007f4 <_ZN5Tasks16task_one_handlerEv+0x28>)
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f99f 	bl	8000b26 <_ZN5Usart4putsEPKc>
			printf("Task one\n");
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <_ZN5Tasks16task_one_handlerEv+0x2c>)
 80007ea:	f000 fba1 	bl	8000f30 <puts>
			Led::delay(10);
 80007ee:	e7ef      	b.n	80007d0 <_ZN5Tasks16task_one_handlerEv+0x4>
 80007f0:	200000a8 	.word	0x200000a8
 80007f4:	08001d64 	.word	0x08001d64
 80007f8:	08001d70 	.word	0x08001d70

080007fc <_ZN5Tasks16task_two_handlerEv>:
		}
	}

	void task_two_handler()
	{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
		while(1)
		{
			Led::delay(8);
 8000800:	2008      	movs	r0, #8
 8000802:	f7ff fda9 	bl	8000358 <_ZN3Led5delayEm>
			Led::led_on(GREEN);
 8000806:	200c      	movs	r0, #12
 8000808:	f7ff fd90 	bl	800032c <_ZN3Led6led_onEm>
			Tasks::usart->puts("Task Two\n\r");
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <_ZN5Tasks16task_two_handlerEv+0x24>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4904      	ldr	r1, [pc, #16]	; (8000824 <_ZN5Tasks16task_two_handlerEv+0x28>)
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f987 	bl	8000b26 <_ZN5Usart4putsEPKc>
			printf("Task two\n");
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <_ZN5Tasks16task_two_handlerEv+0x2c>)
 800081a:	f000 fb89 	bl	8000f30 <puts>
			Led::delay(8);
 800081e:	e7ef      	b.n	8000800 <_ZN5Tasks16task_two_handlerEv+0x4>
 8000820:	200000a8 	.word	0x200000a8
 8000824:	08001d7c 	.word	0x08001d7c
 8000828:	08001d88 	.word	0x08001d88

0800082c <_ZN5Tasks18task_three_handlerEv>:
		}
	}

	void task_three_handler()
	{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
		while(1)
		{
			Led::delay(6);
 8000830:	2006      	movs	r0, #6
 8000832:	f7ff fd91 	bl	8000358 <_ZN3Led5delayEm>
			Led::led_on(BLUE);
 8000836:	200f      	movs	r0, #15
 8000838:	f7ff fd78 	bl	800032c <_ZN3Led6led_onEm>
			Tasks::usart->puts("Task Three\n\r");
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <_ZN5Tasks18task_three_handlerEv+0x24>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4904      	ldr	r1, [pc, #16]	; (8000854 <_ZN5Tasks18task_three_handlerEv+0x28>)
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f96f 	bl	8000b26 <_ZN5Usart4putsEPKc>
			printf("Task three\n");
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <_ZN5Tasks18task_three_handlerEv+0x2c>)
 800084a:	f000 fb71 	bl	8000f30 <puts>
			Led::delay(6);
 800084e:	e7ef      	b.n	8000830 <_ZN5Tasks18task_three_handlerEv+0x4>
 8000850:	200000a8 	.word	0x200000a8
 8000854:	08001d94 	.word	0x08001d94
 8000858:	08001da4 	.word	0x08001da4

0800085c <_ZN5Tasks17task_four_handlerEv>:
		}
	}

	void task_four_handler()
	{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
		while(1)
		{
			Led::delay(4);
 8000860:	2004      	movs	r0, #4
 8000862:	f7ff fd79 	bl	8000358 <_ZN3Led5delayEm>
			Led::led_on(ORANGE);
 8000866:	200d      	movs	r0, #13
 8000868:	f7ff fd60 	bl	800032c <_ZN3Led6led_onEm>
			Tasks::usart->puts("Task Four\n\r");
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <_ZN5Tasks17task_four_handlerEv+0x24>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4904      	ldr	r1, [pc, #16]	; (8000884 <_ZN5Tasks17task_four_handlerEv+0x28>)
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f957 	bl	8000b26 <_ZN5Usart4putsEPKc>
			printf("Task four\n");
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <_ZN5Tasks17task_four_handlerEv+0x2c>)
 800087a:	f000 fb59 	bl	8000f30 <puts>
			Led::delay(4);
 800087e:	e7ef      	b.n	8000860 <_ZN5Tasks17task_four_handlerEv+0x4>
 8000880:	200000a8 	.word	0x200000a8
 8000884:	08001db0 	.word	0x08001db0
 8000888:	08001dbc 	.word	0x08001dbc

0800088c <TIM4_IRQHandler>:
		*pCR1 &= ~ 1 << 0;
	}
}

extern "C" void TIM4_IRQHandler()
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
	uint32_t volatile *pSR = (uint32_t*)0x40002010;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <TIM4_IRQHandler+0x2c>)
 8000894:	607b      	str	r3, [r7, #4]
	my_ticks++;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <TIM4_IRQHandler+0x30>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	3301      	adds	r3, #1
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <TIM4_IRQHandler+0x30>)
 800089e:	6013      	str	r3, [r2, #0]

	*pSR &= ~(1 << 0);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f023 0201 	bic.w	r2, r3, #1
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40002010 	.word	0x40002010
 80008bc:	200000ac 	.word	0x200000ac

080008c0 <_ZN5UsartC1E7USART_t>:


#include <usart.h>
#include "stm32f407xx.h"

Usart::Usart(USART_t usart) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
 80008cc:	4a32      	ldr	r2, [pc, #200]	; (8000998 <_ZN5UsartC1E7USART_t+0xd8>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->_usart = usart;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	78fa      	ldrb	r2, [r7, #3]
 80008d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	switch(usart)
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	2b05      	cmp	r3, #5
 80008de:	d849      	bhi.n	8000974 <_ZN5UsartC1E7USART_t+0xb4>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <_ZN5UsartC1E7USART_t+0x28>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	08000901 	.word	0x08000901
 80008ec:	08000909 	.word	0x08000909
 80008f0:	0800093b 	.word	0x0800093b
 80008f4:	08000975 	.word	0x08000975
 80008f8:	08000975 	.word	0x08000975
 80008fc:	0800096d 	.word	0x0800096d
	{
	case USART1:
		this->_rcc_usart = (uint32_t*)RCC_USART1;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a26      	ldr	r2, [pc, #152]	; (800099c <_ZN5UsartC1E7USART_t+0xdc>)
 8000904:	605a      	str	r2, [r3, #4]
		break;
 8000906:	e038      	b.n	800097a <_ZN5UsartC1E7USART_t+0xba>
	case USART2:
		this->_rcc_usart = (uint32_t*)RCC_USART2;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a25      	ldr	r2, [pc, #148]	; (80009a0 <_ZN5UsartC1E7USART_t+0xe0>)
 800090c:	605a      	str	r2, [r3, #4]
		this->_rcc_gpio = (uint32_t*)RCC_GPIOA;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a24      	ldr	r2, [pc, #144]	; (80009a4 <_ZN5UsartC1E7USART_t+0xe4>)
 8000912:	609a      	str	r2, [r3, #8]
		this->_gpio_mode = (uint32_t*)GPIOA_MODE;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <_ZN5UsartC1E7USART_t+0xe8>)
 8000918:	60da      	str	r2, [r3, #12]
		this->_gpio_aflr = (uint32_t*)GPIOA_AFLR;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a23      	ldr	r2, [pc, #140]	; (80009ac <_ZN5UsartC1E7USART_t+0xec>)
 800091e:	611a      	str	r2, [r3, #16]
		this->_usart_cr1 = (uint32_t*)USART2_CR1;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <_ZN5UsartC1E7USART_t+0xf0>)
 8000924:	619a      	str	r2, [r3, #24]
		this->_usart_brr = (uint32_t*)USART2_BRR;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a22      	ldr	r2, [pc, #136]	; (80009b4 <_ZN5UsartC1E7USART_t+0xf4>)
 800092a:	61da      	str	r2, [r3, #28]
		this->_usart_sr = (uint32_t*)USART2_SR;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <_ZN5UsartC1E7USART_t+0xf8>)
 8000930:	621a      	str	r2, [r3, #32]
		this->_usart_dr = (uint32_t*)USART2_DR;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a21      	ldr	r2, [pc, #132]	; (80009bc <_ZN5UsartC1E7USART_t+0xfc>)
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000938:	e01f      	b.n	800097a <_ZN5UsartC1E7USART_t+0xba>
	case USART3:
		this->_rcc_usart = (uint32_t*)RCC_USART3;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <_ZN5UsartC1E7USART_t+0xe0>)
 800093e:	605a      	str	r2, [r3, #4]
		this->_rcc_gpio = (uint32_t*)RCC_GPIOC;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <_ZN5UsartC1E7USART_t+0xe4>)
 8000944:	609a      	str	r2, [r3, #8]
		this->_gpio_mode = (uint32_t*)GPIOC_MODE;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <_ZN5UsartC1E7USART_t+0x100>)
 800094a:	60da      	str	r2, [r3, #12]
		this->_gpio_afhr = (uint32_t*)GPIOC_AFHR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <_ZN5UsartC1E7USART_t+0x104>)
 8000950:	615a      	str	r2, [r3, #20]
		this->_usart_cr1 = (uint32_t*)USART3_CR1;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <_ZN5UsartC1E7USART_t+0x108>)
 8000956:	619a      	str	r2, [r3, #24]
		this->_usart_brr = (uint32_t*)USART3_BRR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <_ZN5UsartC1E7USART_t+0x10c>)
 800095c:	61da      	str	r2, [r3, #28]
		this->_usart_sr = (uint32_t*)USART3_SR;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <_ZN5UsartC1E7USART_t+0x110>)
 8000962:	621a      	str	r2, [r3, #32]
		this->_usart_dr = (uint32_t*)USART3_DR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <_ZN5UsartC1E7USART_t+0x114>)
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 800096a:	e006      	b.n	800097a <_ZN5UsartC1E7USART_t+0xba>
	case USART6:
		this->_rcc_usart = (uint32_t*)RCC_USART6;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <_ZN5UsartC1E7USART_t+0xdc>)
 8000970:	605a      	str	r2, [r3, #4]
		break;
 8000972:	e002      	b.n	800097a <_ZN5UsartC1E7USART_t+0xba>
	default:
		this->_rcc_usart = NULL;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
	}

	this->init_clocks();
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 f82c 	bl	80009d8 <_ZN5Usart11init_clocksEv>
	this->config_gpio();
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f000 f869 	bl	8000a58 <_ZN5Usart11config_gpioEv>
	this->config_usart();
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f899 	bl	8000abe <_ZN5Usart12config_usartEv>
//		strcpy(msg, "No Usart Enabled\n\r");
//		this->puts(msg);
//		break;
//
//	}
}
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	08001dd0 	.word	0x08001dd0
 800099c:	40023844 	.word	0x40023844
 80009a0:	40023840 	.word	0x40023840
 80009a4:	40023830 	.word	0x40023830
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020020 	.word	0x40020020
 80009b0:	4000440c 	.word	0x4000440c
 80009b4:	40004408 	.word	0x40004408
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40004404 	.word	0x40004404
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020824 	.word	0x40020824
 80009c8:	4000480c 	.word	0x4000480c
 80009cc:	40004808 	.word	0x40004808
 80009d0:	40004800 	.word	0x40004800
 80009d4:	40004804 	.word	0x40004804

080009d8 <_ZN5Usart11init_clocksEv>:

void Usart::init_clocks(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	switch(this->_usart)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d020      	beq.n	8000a2c <_ZN5Usart11init_clocksEv+0x54>
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	dc2e      	bgt.n	8000a4c <_ZN5Usart11init_clocksEv+0x74>
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <_ZN5Usart11init_clocksEv+0x20>
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d009      	beq.n	8000a0a <_ZN5Usart11init_clocksEv+0x32>
		break;
	case USART3:
		*_rcc_usart |= 1 << 18;
		*_rcc_gpio |= 1 << 2;
	default:
		break;
 80009f6:	e029      	b.n	8000a4c <_ZN5Usart11init_clocksEv+0x74>
		*_rcc_usart |= 1 << 4;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f042 0210 	orr.w	r2, r2, #16
 8000a06:	601a      	str	r2, [r3, #0]
		break;
 8000a08:	e021      	b.n	8000a4e <_ZN5Usart11init_clocksEv+0x76>
		*_rcc_usart |= 1 << 17;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a18:	601a      	str	r2, [r3, #0]
		*_rcc_gpio |= 1 << 0;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	f042 0201 	orr.w	r2, r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
		break;
 8000a2a:	e010      	b.n	8000a4e <_ZN5Usart11init_clocksEv+0x76>
		*_rcc_usart |= 1 << 18;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a3a:	601a      	str	r2, [r3, #0]
		*_rcc_gpio |= 1 << 2;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f042 0204 	orr.w	r2, r2, #4
 8000a4a:	601a      	str	r2, [r3, #0]
		break;
 8000a4c:	bf00      	nop
	}
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <_ZN5Usart11config_gpioEv>:

void Usart::config_gpio()
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	switch(this->_usart)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d002      	beq.n	8000a70 <_ZN5Usart11config_gpioEv+0x18>
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d011      	beq.n	8000a92 <_ZN5Usart11config_gpioEv+0x3a>
		*_gpio_mode |= 2 << 20 | 2 << 22;
		*_gpio_afhr |= 7 << 8 | 7 << 12;
		break;
	}

}
 8000a6e:	e021      	b.n	8000ab4 <_ZN5Usart11config_gpioEv+0x5c>
		*_gpio_mode |= 2 << 4 | 2 << 6;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8000a7e:	601a      	str	r2, [r3, #0]
		*_gpio_aflr |= 7 << 8 | 7 << 12;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	691b      	ldr	r3, [r3, #16]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	f442 42ee 	orr.w	r2, r2, #30464	; 0x7700
 8000a8e:	601a      	str	r2, [r3, #0]
		break;
 8000a90:	e010      	b.n	8000ab4 <_ZN5Usart11config_gpioEv+0x5c>
		*_gpio_mode |= 2 << 20 | 2 << 22;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	f442 0220 	orr.w	r2, r2, #10485760	; 0xa00000
 8000aa0:	601a      	str	r2, [r3, #0]
		*_gpio_afhr |= 7 << 8 | 7 << 12;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f442 42ee 	orr.w	r2, r2, #30464	; 0x7700
 8000ab0:	601a      	str	r2, [r3, #0]
		break;
 8000ab2:	bf00      	nop
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <_ZN5Usart12config_usartEv>:

void Usart::config_usart()
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	*_usart_brr = 0x0683;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f240 6283 	movw	r2, #1667	; 0x683
 8000ace:	601a      	str	r2, [r3, #0]
	*_usart_cr1 |= 1 << 2 | 1 << 3 | 1 << 5 | 1 << 13;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	6992      	ldr	r2, [r2, #24]
 8000ada:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ade:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <_ZN5Usart3putEc>:

void Usart::put(char c)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	70fb      	strb	r3, [r7, #3]
	while(!(*_usart_sr & 0x0080)){};
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a1b      	ldr	r3, [r3, #32]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf0c      	ite	eq
 8000b08:	2301      	moveq	r3, #1
 8000b0a:	2300      	movne	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d000      	beq.n	8000b14 <_ZN5Usart3putEc+0x26>
 8000b12:	e7f2      	b.n	8000afa <_ZN5Usart3putEc+0xc>
	*_usart_dr = c;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b18:	78fa      	ldrb	r2, [r7, #3]
 8000b1a:	601a      	str	r2, [r3, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <_ZN5Usart4putsEPKc>:

void Usart::puts(const char *s)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
	if(*s)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d00c      	beq.n	8000b52 <_ZN5Usart4putsEPKc+0x2c>
	{
		this->put(*s);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffd5 	bl	8000aee <_ZN5Usart3putEc>
		this->puts(s+=1);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	3301      	adds	r3, #1
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	6839      	ldr	r1, [r7, #0]
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ffea 	bl	8000b26 <_ZN5Usart4putsEPKc>
	}
	while(!(*_usart_sr & 0x0040)){};
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bf0c      	ite	eq
 8000b60:	2301      	moveq	r3, #1
 8000b62:	2300      	movne	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d000      	beq.n	8000b6c <_ZN5Usart4putsEPKc+0x46>
 8000b6a:	e7f2      	b.n	8000b52 <_ZN5Usart4putsEPKc+0x2c>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZN5UsartD1Ev>:
	uint32_t temp;
	while(!(*_usart_sr & (1 << 5)));
	temp = *_usart_dr;
	return temp;
}
Usart::~Usart() {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <_ZN5UsartD1Ev+0x1c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	08001dd0 	.word	0x08001dd0

08000b94 <_ZN5UsartD0Ev>:
Usart::~Usart() {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
}
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ffe9 	bl	8000b74 <_ZN5UsartD1Ev>
 8000ba2:	212c      	movs	r1, #44	; 0x2c
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 f82e 	bl	8000c06 <_ZdlPvj>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	; (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	; (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000be2:	f000 f83b 	bl	8000c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be6:	f7ff fbcf 	bl	8000388 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   r0, =_estack
 8000bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000bf8:	08001e78 	.word	0x08001e78
  ldr r2, =_sbss
 8000bfc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000c00:	200000cc 	.word	0x200000cc

08000c04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>

08000c06 <_ZdlPvj>:
 8000c06:	f000 b811 	b.w	8000c2c <_ZdlPv>

08000c0a <_Znwj>:
 8000c0a:	2801      	cmp	r0, #1
 8000c0c:	bf38      	it	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	b510      	push	{r4, lr}
 8000c12:	4604      	mov	r4, r0
 8000c14:	4620      	mov	r0, r4
 8000c16:	f000 f845 	bl	8000ca4 <malloc>
 8000c1a:	b930      	cbnz	r0, 8000c2a <_Znwj+0x20>
 8000c1c:	f000 f808 	bl	8000c30 <_ZSt15get_new_handlerv>
 8000c20:	b908      	cbnz	r0, 8000c26 <_Znwj+0x1c>
 8000c22:	f000 f80d 	bl	8000c40 <abort>
 8000c26:	4780      	blx	r0
 8000c28:	e7f4      	b.n	8000c14 <_Znwj+0xa>
 8000c2a:	bd10      	pop	{r4, pc}

08000c2c <_ZdlPv>:
 8000c2c:	f000 b842 	b.w	8000cb4 <free>

08000c30 <_ZSt15get_new_handlerv>:
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <_ZSt15get_new_handlerv+0xc>)
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	f3bf 8f5b 	dmb	ish
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200000b0 	.word	0x200000b0

08000c40 <abort>:
 8000c40:	b508      	push	{r3, lr}
 8000c42:	2006      	movs	r0, #6
 8000c44:	f000 f9b4 	bl	8000fb0 <raise>
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff fcbe 	bl	80005ca <_exit>
	...

08000c50 <__errno>:
 8000c50:	4b01      	ldr	r3, [pc, #4]	; (8000c58 <__errno+0x8>)
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000020 	.word	0x20000020

08000c5c <__libc_init_array>:
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	4d0d      	ldr	r5, [pc, #52]	; (8000c94 <__libc_init_array+0x38>)
 8000c60:	4c0d      	ldr	r4, [pc, #52]	; (8000c98 <__libc_init_array+0x3c>)
 8000c62:	1b64      	subs	r4, r4, r5
 8000c64:	10a4      	asrs	r4, r4, #2
 8000c66:	2600      	movs	r6, #0
 8000c68:	42a6      	cmp	r6, r4
 8000c6a:	d109      	bne.n	8000c80 <__libc_init_array+0x24>
 8000c6c:	4d0b      	ldr	r5, [pc, #44]	; (8000c9c <__libc_init_array+0x40>)
 8000c6e:	4c0c      	ldr	r4, [pc, #48]	; (8000ca0 <__libc_init_array+0x44>)
 8000c70:	f001 f83c 	bl	8001cec <_init>
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	10a4      	asrs	r4, r4, #2
 8000c78:	2600      	movs	r6, #0
 8000c7a:	42a6      	cmp	r6, r4
 8000c7c:	d105      	bne.n	8000c8a <__libc_init_array+0x2e>
 8000c7e:	bd70      	pop	{r4, r5, r6, pc}
 8000c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c84:	4798      	blx	r3
 8000c86:	3601      	adds	r6, #1
 8000c88:	e7ee      	b.n	8000c68 <__libc_init_array+0xc>
 8000c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c8e:	4798      	blx	r3
 8000c90:	3601      	adds	r6, #1
 8000c92:	e7f2      	b.n	8000c7a <__libc_init_array+0x1e>
 8000c94:	08001e70 	.word	0x08001e70
 8000c98:	08001e70 	.word	0x08001e70
 8000c9c:	08001e70 	.word	0x08001e70
 8000ca0:	08001e74 	.word	0x08001e74

08000ca4 <malloc>:
 8000ca4:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <malloc+0xc>)
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	f000 b861 	b.w	8000d70 <_malloc_r>
 8000cae:	bf00      	nop
 8000cb0:	20000020 	.word	0x20000020

08000cb4 <free>:
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <free+0xc>)
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	6818      	ldr	r0, [r3, #0]
 8000cba:	f000 b80b 	b.w	8000cd4 <_free_r>
 8000cbe:	bf00      	nop
 8000cc0:	20000020 	.word	0x20000020

08000cc4 <memset>:
 8000cc4:	4402      	add	r2, r0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d100      	bne.n	8000cce <memset+0xa>
 8000ccc:	4770      	bx	lr
 8000cce:	f803 1b01 	strb.w	r1, [r3], #1
 8000cd2:	e7f9      	b.n	8000cc8 <memset+0x4>

08000cd4 <_free_r>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	4605      	mov	r5, r0
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d045      	beq.n	8000d68 <_free_r+0x94>
 8000cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ce0:	1f0c      	subs	r4, r1, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bfb8      	it	lt
 8000ce6:	18e4      	addlt	r4, r4, r3
 8000ce8:	f000 fc5c 	bl	80015a4 <__malloc_lock>
 8000cec:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <_free_r+0x98>)
 8000cee:	6813      	ldr	r3, [r2, #0]
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	b933      	cbnz	r3, 8000d02 <_free_r+0x2e>
 8000cf4:	6063      	str	r3, [r4, #4]
 8000cf6:	6014      	str	r4, [r2, #0]
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cfe:	f000 bc57 	b.w	80015b0 <__malloc_unlock>
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	d90b      	bls.n	8000d1e <_free_r+0x4a>
 8000d06:	6821      	ldr	r1, [r4, #0]
 8000d08:	1862      	adds	r2, r4, r1
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	bf04      	itt	eq
 8000d0e:	681a      	ldreq	r2, [r3, #0]
 8000d10:	685b      	ldreq	r3, [r3, #4]
 8000d12:	6063      	str	r3, [r4, #4]
 8000d14:	bf04      	itt	eq
 8000d16:	1852      	addeq	r2, r2, r1
 8000d18:	6022      	streq	r2, [r4, #0]
 8000d1a:	6004      	str	r4, [r0, #0]
 8000d1c:	e7ec      	b.n	8000cf8 <_free_r+0x24>
 8000d1e:	461a      	mov	r2, r3
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	b10b      	cbz	r3, 8000d28 <_free_r+0x54>
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d9fa      	bls.n	8000d1e <_free_r+0x4a>
 8000d28:	6811      	ldr	r1, [r2, #0]
 8000d2a:	1850      	adds	r0, r2, r1
 8000d2c:	42a0      	cmp	r0, r4
 8000d2e:	d10b      	bne.n	8000d48 <_free_r+0x74>
 8000d30:	6820      	ldr	r0, [r4, #0]
 8000d32:	4401      	add	r1, r0
 8000d34:	1850      	adds	r0, r2, r1
 8000d36:	4283      	cmp	r3, r0
 8000d38:	6011      	str	r1, [r2, #0]
 8000d3a:	d1dd      	bne.n	8000cf8 <_free_r+0x24>
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	6053      	str	r3, [r2, #4]
 8000d42:	4401      	add	r1, r0
 8000d44:	6011      	str	r1, [r2, #0]
 8000d46:	e7d7      	b.n	8000cf8 <_free_r+0x24>
 8000d48:	d902      	bls.n	8000d50 <_free_r+0x7c>
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	602b      	str	r3, [r5, #0]
 8000d4e:	e7d3      	b.n	8000cf8 <_free_r+0x24>
 8000d50:	6820      	ldr	r0, [r4, #0]
 8000d52:	1821      	adds	r1, r4, r0
 8000d54:	428b      	cmp	r3, r1
 8000d56:	bf04      	itt	eq
 8000d58:	6819      	ldreq	r1, [r3, #0]
 8000d5a:	685b      	ldreq	r3, [r3, #4]
 8000d5c:	6063      	str	r3, [r4, #4]
 8000d5e:	bf04      	itt	eq
 8000d60:	1809      	addeq	r1, r1, r0
 8000d62:	6021      	streq	r1, [r4, #0]
 8000d64:	6054      	str	r4, [r2, #4]
 8000d66:	e7c7      	b.n	8000cf8 <_free_r+0x24>
 8000d68:	bd38      	pop	{r3, r4, r5, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000b4 	.word	0x200000b4

08000d70 <_malloc_r>:
 8000d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d72:	1ccd      	adds	r5, r1, #3
 8000d74:	f025 0503 	bic.w	r5, r5, #3
 8000d78:	3508      	adds	r5, #8
 8000d7a:	2d0c      	cmp	r5, #12
 8000d7c:	bf38      	it	cc
 8000d7e:	250c      	movcc	r5, #12
 8000d80:	2d00      	cmp	r5, #0
 8000d82:	4606      	mov	r6, r0
 8000d84:	db01      	blt.n	8000d8a <_malloc_r+0x1a>
 8000d86:	42a9      	cmp	r1, r5
 8000d88:	d903      	bls.n	8000d92 <_malloc_r+0x22>
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	6033      	str	r3, [r6, #0]
 8000d8e:	2000      	movs	r0, #0
 8000d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d92:	f000 fc07 	bl	80015a4 <__malloc_lock>
 8000d96:	4921      	ldr	r1, [pc, #132]	; (8000e1c <_malloc_r+0xac>)
 8000d98:	680a      	ldr	r2, [r1, #0]
 8000d9a:	4614      	mov	r4, r2
 8000d9c:	b99c      	cbnz	r4, 8000dc6 <_malloc_r+0x56>
 8000d9e:	4f20      	ldr	r7, [pc, #128]	; (8000e20 <_malloc_r+0xb0>)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b923      	cbnz	r3, 8000dae <_malloc_r+0x3e>
 8000da4:	4621      	mov	r1, r4
 8000da6:	4630      	mov	r0, r6
 8000da8:	f000 f8ca 	bl	8000f40 <_sbrk_r>
 8000dac:	6038      	str	r0, [r7, #0]
 8000dae:	4629      	mov	r1, r5
 8000db0:	4630      	mov	r0, r6
 8000db2:	f000 f8c5 	bl	8000f40 <_sbrk_r>
 8000db6:	1c43      	adds	r3, r0, #1
 8000db8:	d123      	bne.n	8000e02 <_malloc_r+0x92>
 8000dba:	230c      	movs	r3, #12
 8000dbc:	6033      	str	r3, [r6, #0]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	f000 fbf6 	bl	80015b0 <__malloc_unlock>
 8000dc4:	e7e3      	b.n	8000d8e <_malloc_r+0x1e>
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	1b5b      	subs	r3, r3, r5
 8000dca:	d417      	bmi.n	8000dfc <_malloc_r+0x8c>
 8000dcc:	2b0b      	cmp	r3, #11
 8000dce:	d903      	bls.n	8000dd8 <_malloc_r+0x68>
 8000dd0:	6023      	str	r3, [r4, #0]
 8000dd2:	441c      	add	r4, r3
 8000dd4:	6025      	str	r5, [r4, #0]
 8000dd6:	e004      	b.n	8000de2 <_malloc_r+0x72>
 8000dd8:	6863      	ldr	r3, [r4, #4]
 8000dda:	42a2      	cmp	r2, r4
 8000ddc:	bf0c      	ite	eq
 8000dde:	600b      	streq	r3, [r1, #0]
 8000de0:	6053      	strne	r3, [r2, #4]
 8000de2:	4630      	mov	r0, r6
 8000de4:	f000 fbe4 	bl	80015b0 <__malloc_unlock>
 8000de8:	f104 000b 	add.w	r0, r4, #11
 8000dec:	1d23      	adds	r3, r4, #4
 8000dee:	f020 0007 	bic.w	r0, r0, #7
 8000df2:	1ac2      	subs	r2, r0, r3
 8000df4:	d0cc      	beq.n	8000d90 <_malloc_r+0x20>
 8000df6:	1a1b      	subs	r3, r3, r0
 8000df8:	50a3      	str	r3, [r4, r2]
 8000dfa:	e7c9      	b.n	8000d90 <_malloc_r+0x20>
 8000dfc:	4622      	mov	r2, r4
 8000dfe:	6864      	ldr	r4, [r4, #4]
 8000e00:	e7cc      	b.n	8000d9c <_malloc_r+0x2c>
 8000e02:	1cc4      	adds	r4, r0, #3
 8000e04:	f024 0403 	bic.w	r4, r4, #3
 8000e08:	42a0      	cmp	r0, r4
 8000e0a:	d0e3      	beq.n	8000dd4 <_malloc_r+0x64>
 8000e0c:	1a21      	subs	r1, r4, r0
 8000e0e:	4630      	mov	r0, r6
 8000e10:	f000 f896 	bl	8000f40 <_sbrk_r>
 8000e14:	3001      	adds	r0, #1
 8000e16:	d1dd      	bne.n	8000dd4 <_malloc_r+0x64>
 8000e18:	e7cf      	b.n	8000dba <_malloc_r+0x4a>
 8000e1a:	bf00      	nop
 8000e1c:	200000b4 	.word	0x200000b4
 8000e20:	200000b8 	.word	0x200000b8

08000e24 <iprintf>:
 8000e24:	b40f      	push	{r0, r1, r2, r3}
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <iprintf+0x2c>)
 8000e28:	b513      	push	{r0, r1, r4, lr}
 8000e2a:	681c      	ldr	r4, [r3, #0]
 8000e2c:	b124      	cbz	r4, 8000e38 <iprintf+0x14>
 8000e2e:	69a3      	ldr	r3, [r4, #24]
 8000e30:	b913      	cbnz	r3, 8000e38 <iprintf+0x14>
 8000e32:	4620      	mov	r0, r4
 8000e34:	f000 fab2 	bl	800139c <__sinit>
 8000e38:	ab05      	add	r3, sp, #20
 8000e3a:	9a04      	ldr	r2, [sp, #16]
 8000e3c:	68a1      	ldr	r1, [r4, #8]
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	4620      	mov	r0, r4
 8000e42:	f000 fbe3 	bl	800160c <_vfiprintf_r>
 8000e46:	b002      	add	sp, #8
 8000e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e4c:	b004      	add	sp, #16
 8000e4e:	4770      	bx	lr
 8000e50:	20000020 	.word	0x20000020

08000e54 <_puts_r>:
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	460e      	mov	r6, r1
 8000e58:	4605      	mov	r5, r0
 8000e5a:	b118      	cbz	r0, 8000e64 <_puts_r+0x10>
 8000e5c:	6983      	ldr	r3, [r0, #24]
 8000e5e:	b90b      	cbnz	r3, 8000e64 <_puts_r+0x10>
 8000e60:	f000 fa9c 	bl	800139c <__sinit>
 8000e64:	69ab      	ldr	r3, [r5, #24]
 8000e66:	68ac      	ldr	r4, [r5, #8]
 8000e68:	b913      	cbnz	r3, 8000e70 <_puts_r+0x1c>
 8000e6a:	4628      	mov	r0, r5
 8000e6c:	f000 fa96 	bl	800139c <__sinit>
 8000e70:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <_puts_r+0xd0>)
 8000e72:	429c      	cmp	r4, r3
 8000e74:	d120      	bne.n	8000eb8 <_puts_r+0x64>
 8000e76:	686c      	ldr	r4, [r5, #4]
 8000e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e7a:	07db      	lsls	r3, r3, #31
 8000e7c:	d405      	bmi.n	8000e8a <_puts_r+0x36>
 8000e7e:	89a3      	ldrh	r3, [r4, #12]
 8000e80:	0598      	lsls	r0, r3, #22
 8000e82:	d402      	bmi.n	8000e8a <_puts_r+0x36>
 8000e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e86:	f000 fb27 	bl	80014d8 <__retarget_lock_acquire_recursive>
 8000e8a:	89a3      	ldrh	r3, [r4, #12]
 8000e8c:	0719      	lsls	r1, r3, #28
 8000e8e:	d51d      	bpl.n	8000ecc <_puts_r+0x78>
 8000e90:	6923      	ldr	r3, [r4, #16]
 8000e92:	b1db      	cbz	r3, 8000ecc <_puts_r+0x78>
 8000e94:	3e01      	subs	r6, #1
 8000e96:	68a3      	ldr	r3, [r4, #8]
 8000e98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	60a3      	str	r3, [r4, #8]
 8000ea0:	bb39      	cbnz	r1, 8000ef2 <_puts_r+0x9e>
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	da38      	bge.n	8000f18 <_puts_r+0xc4>
 8000ea6:	4622      	mov	r2, r4
 8000ea8:	210a      	movs	r1, #10
 8000eaa:	4628      	mov	r0, r5
 8000eac:	f000 f89c 	bl	8000fe8 <__swbuf_r>
 8000eb0:	3001      	adds	r0, #1
 8000eb2:	d011      	beq.n	8000ed8 <_puts_r+0x84>
 8000eb4:	250a      	movs	r5, #10
 8000eb6:	e011      	b.n	8000edc <_puts_r+0x88>
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <_puts_r+0xd4>)
 8000eba:	429c      	cmp	r4, r3
 8000ebc:	d101      	bne.n	8000ec2 <_puts_r+0x6e>
 8000ebe:	68ac      	ldr	r4, [r5, #8]
 8000ec0:	e7da      	b.n	8000e78 <_puts_r+0x24>
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <_puts_r+0xd8>)
 8000ec4:	429c      	cmp	r4, r3
 8000ec6:	bf08      	it	eq
 8000ec8:	68ec      	ldreq	r4, [r5, #12]
 8000eca:	e7d5      	b.n	8000e78 <_puts_r+0x24>
 8000ecc:	4621      	mov	r1, r4
 8000ece:	4628      	mov	r0, r5
 8000ed0:	f000 f8dc 	bl	800108c <__swsetup_r>
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	d0dd      	beq.n	8000e94 <_puts_r+0x40>
 8000ed8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000edc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ede:	07da      	lsls	r2, r3, #31
 8000ee0:	d405      	bmi.n	8000eee <_puts_r+0x9a>
 8000ee2:	89a3      	ldrh	r3, [r4, #12]
 8000ee4:	059b      	lsls	r3, r3, #22
 8000ee6:	d402      	bmi.n	8000eee <_puts_r+0x9a>
 8000ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eea:	f000 faf6 	bl	80014da <__retarget_lock_release_recursive>
 8000eee:	4628      	mov	r0, r5
 8000ef0:	bd70      	pop	{r4, r5, r6, pc}
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	da04      	bge.n	8000f00 <_puts_r+0xac>
 8000ef6:	69a2      	ldr	r2, [r4, #24]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dc06      	bgt.n	8000f0a <_puts_r+0xb6>
 8000efc:	290a      	cmp	r1, #10
 8000efe:	d004      	beq.n	8000f0a <_puts_r+0xb6>
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	6022      	str	r2, [r4, #0]
 8000f06:	7019      	strb	r1, [r3, #0]
 8000f08:	e7c5      	b.n	8000e96 <_puts_r+0x42>
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	f000 f86b 	bl	8000fe8 <__swbuf_r>
 8000f12:	3001      	adds	r0, #1
 8000f14:	d1bf      	bne.n	8000e96 <_puts_r+0x42>
 8000f16:	e7df      	b.n	8000ed8 <_puts_r+0x84>
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	250a      	movs	r5, #10
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	6022      	str	r2, [r4, #0]
 8000f20:	701d      	strb	r5, [r3, #0]
 8000f22:	e7db      	b.n	8000edc <_puts_r+0x88>
 8000f24:	08001dfc 	.word	0x08001dfc
 8000f28:	08001e1c 	.word	0x08001e1c
 8000f2c:	08001ddc 	.word	0x08001ddc

08000f30 <puts>:
 8000f30:	4b02      	ldr	r3, [pc, #8]	; (8000f3c <puts+0xc>)
 8000f32:	4601      	mov	r1, r0
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	f7ff bf8d 	b.w	8000e54 <_puts_r>
 8000f3a:	bf00      	nop
 8000f3c:	20000020 	.word	0x20000020

08000f40 <_sbrk_r>:
 8000f40:	b538      	push	{r3, r4, r5, lr}
 8000f42:	4d06      	ldr	r5, [pc, #24]	; (8000f5c <_sbrk_r+0x1c>)
 8000f44:	2300      	movs	r3, #0
 8000f46:	4604      	mov	r4, r0
 8000f48:	4608      	mov	r0, r1
 8000f4a:	602b      	str	r3, [r5, #0]
 8000f4c:	f7ff fbb0 	bl	80006b0 <_sbrk>
 8000f50:	1c43      	adds	r3, r0, #1
 8000f52:	d102      	bne.n	8000f5a <_sbrk_r+0x1a>
 8000f54:	682b      	ldr	r3, [r5, #0]
 8000f56:	b103      	cbz	r3, 8000f5a <_sbrk_r+0x1a>
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	bd38      	pop	{r3, r4, r5, pc}
 8000f5c:	200000c8 	.word	0x200000c8

08000f60 <_raise_r>:
 8000f60:	291f      	cmp	r1, #31
 8000f62:	b538      	push	{r3, r4, r5, lr}
 8000f64:	4604      	mov	r4, r0
 8000f66:	460d      	mov	r5, r1
 8000f68:	d904      	bls.n	8000f74 <_raise_r+0x14>
 8000f6a:	2316      	movs	r3, #22
 8000f6c:	6003      	str	r3, [r0, #0]
 8000f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000f76:	b112      	cbz	r2, 8000f7e <_raise_r+0x1e>
 8000f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8000f7c:	b94b      	cbnz	r3, 8000f92 <_raise_r+0x32>
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f000 f830 	bl	8000fe4 <_getpid_r>
 8000f84:	462a      	mov	r2, r5
 8000f86:	4601      	mov	r1, r0
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8e:	f000 b817 	b.w	8000fc0 <_kill_r>
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d00a      	beq.n	8000fac <_raise_r+0x4c>
 8000f96:	1c59      	adds	r1, r3, #1
 8000f98:	d103      	bne.n	8000fa2 <_raise_r+0x42>
 8000f9a:	2316      	movs	r3, #22
 8000f9c:	6003      	str	r3, [r0, #0]
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	e7e7      	b.n	8000f72 <_raise_r+0x12>
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8000fa8:	4628      	mov	r0, r5
 8000faa:	4798      	blx	r3
 8000fac:	2000      	movs	r0, #0
 8000fae:	e7e0      	b.n	8000f72 <_raise_r+0x12>

08000fb0 <raise>:
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <raise+0xc>)
 8000fb2:	4601      	mov	r1, r0
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	f7ff bfd3 	b.w	8000f60 <_raise_r>
 8000fba:	bf00      	nop
 8000fbc:	20000020 	.word	0x20000020

08000fc0 <_kill_r>:
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	4d07      	ldr	r5, [pc, #28]	; (8000fe0 <_kill_r+0x20>)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	4608      	mov	r0, r1
 8000fca:	4611      	mov	r1, r2
 8000fcc:	602b      	str	r3, [r5, #0]
 8000fce:	f7ff faec 	bl	80005aa <_kill>
 8000fd2:	1c43      	adds	r3, r0, #1
 8000fd4:	d102      	bne.n	8000fdc <_kill_r+0x1c>
 8000fd6:	682b      	ldr	r3, [r5, #0]
 8000fd8:	b103      	cbz	r3, 8000fdc <_kill_r+0x1c>
 8000fda:	6023      	str	r3, [r4, #0]
 8000fdc:	bd38      	pop	{r3, r4, r5, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000c8 	.word	0x200000c8

08000fe4 <_getpid_r>:
 8000fe4:	f7ff bada 	b.w	800059c <_getpid>

08000fe8 <__swbuf_r>:
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	460e      	mov	r6, r1
 8000fec:	4614      	mov	r4, r2
 8000fee:	4605      	mov	r5, r0
 8000ff0:	b118      	cbz	r0, 8000ffa <__swbuf_r+0x12>
 8000ff2:	6983      	ldr	r3, [r0, #24]
 8000ff4:	b90b      	cbnz	r3, 8000ffa <__swbuf_r+0x12>
 8000ff6:	f000 f9d1 	bl	800139c <__sinit>
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <__swbuf_r+0x98>)
 8000ffc:	429c      	cmp	r4, r3
 8000ffe:	d12b      	bne.n	8001058 <__swbuf_r+0x70>
 8001000:	686c      	ldr	r4, [r5, #4]
 8001002:	69a3      	ldr	r3, [r4, #24]
 8001004:	60a3      	str	r3, [r4, #8]
 8001006:	89a3      	ldrh	r3, [r4, #12]
 8001008:	071a      	lsls	r2, r3, #28
 800100a:	d52f      	bpl.n	800106c <__swbuf_r+0x84>
 800100c:	6923      	ldr	r3, [r4, #16]
 800100e:	b36b      	cbz	r3, 800106c <__swbuf_r+0x84>
 8001010:	6923      	ldr	r3, [r4, #16]
 8001012:	6820      	ldr	r0, [r4, #0]
 8001014:	1ac0      	subs	r0, r0, r3
 8001016:	6963      	ldr	r3, [r4, #20]
 8001018:	b2f6      	uxtb	r6, r6
 800101a:	4283      	cmp	r3, r0
 800101c:	4637      	mov	r7, r6
 800101e:	dc04      	bgt.n	800102a <__swbuf_r+0x42>
 8001020:	4621      	mov	r1, r4
 8001022:	4628      	mov	r0, r5
 8001024:	f000 f926 	bl	8001274 <_fflush_r>
 8001028:	bb30      	cbnz	r0, 8001078 <__swbuf_r+0x90>
 800102a:	68a3      	ldr	r3, [r4, #8]
 800102c:	3b01      	subs	r3, #1
 800102e:	60a3      	str	r3, [r4, #8]
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	6022      	str	r2, [r4, #0]
 8001036:	701e      	strb	r6, [r3, #0]
 8001038:	6963      	ldr	r3, [r4, #20]
 800103a:	3001      	adds	r0, #1
 800103c:	4283      	cmp	r3, r0
 800103e:	d004      	beq.n	800104a <__swbuf_r+0x62>
 8001040:	89a3      	ldrh	r3, [r4, #12]
 8001042:	07db      	lsls	r3, r3, #31
 8001044:	d506      	bpl.n	8001054 <__swbuf_r+0x6c>
 8001046:	2e0a      	cmp	r6, #10
 8001048:	d104      	bne.n	8001054 <__swbuf_r+0x6c>
 800104a:	4621      	mov	r1, r4
 800104c:	4628      	mov	r0, r5
 800104e:	f000 f911 	bl	8001274 <_fflush_r>
 8001052:	b988      	cbnz	r0, 8001078 <__swbuf_r+0x90>
 8001054:	4638      	mov	r0, r7
 8001056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <__swbuf_r+0x9c>)
 800105a:	429c      	cmp	r4, r3
 800105c:	d101      	bne.n	8001062 <__swbuf_r+0x7a>
 800105e:	68ac      	ldr	r4, [r5, #8]
 8001060:	e7cf      	b.n	8001002 <__swbuf_r+0x1a>
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <__swbuf_r+0xa0>)
 8001064:	429c      	cmp	r4, r3
 8001066:	bf08      	it	eq
 8001068:	68ec      	ldreq	r4, [r5, #12]
 800106a:	e7ca      	b.n	8001002 <__swbuf_r+0x1a>
 800106c:	4621      	mov	r1, r4
 800106e:	4628      	mov	r0, r5
 8001070:	f000 f80c 	bl	800108c <__swsetup_r>
 8001074:	2800      	cmp	r0, #0
 8001076:	d0cb      	beq.n	8001010 <__swbuf_r+0x28>
 8001078:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800107c:	e7ea      	b.n	8001054 <__swbuf_r+0x6c>
 800107e:	bf00      	nop
 8001080:	08001dfc 	.word	0x08001dfc
 8001084:	08001e1c 	.word	0x08001e1c
 8001088:	08001ddc 	.word	0x08001ddc

0800108c <__swsetup_r>:
 800108c:	4b32      	ldr	r3, [pc, #200]	; (8001158 <__swsetup_r+0xcc>)
 800108e:	b570      	push	{r4, r5, r6, lr}
 8001090:	681d      	ldr	r5, [r3, #0]
 8001092:	4606      	mov	r6, r0
 8001094:	460c      	mov	r4, r1
 8001096:	b125      	cbz	r5, 80010a2 <__swsetup_r+0x16>
 8001098:	69ab      	ldr	r3, [r5, #24]
 800109a:	b913      	cbnz	r3, 80010a2 <__swsetup_r+0x16>
 800109c:	4628      	mov	r0, r5
 800109e:	f000 f97d 	bl	800139c <__sinit>
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <__swsetup_r+0xd0>)
 80010a4:	429c      	cmp	r4, r3
 80010a6:	d10f      	bne.n	80010c8 <__swsetup_r+0x3c>
 80010a8:	686c      	ldr	r4, [r5, #4]
 80010aa:	89a3      	ldrh	r3, [r4, #12]
 80010ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010b0:	0719      	lsls	r1, r3, #28
 80010b2:	d42c      	bmi.n	800110e <__swsetup_r+0x82>
 80010b4:	06dd      	lsls	r5, r3, #27
 80010b6:	d411      	bmi.n	80010dc <__swsetup_r+0x50>
 80010b8:	2309      	movs	r3, #9
 80010ba:	6033      	str	r3, [r6, #0]
 80010bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80010c0:	81a3      	strh	r3, [r4, #12]
 80010c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c6:	e03e      	b.n	8001146 <__swsetup_r+0xba>
 80010c8:	4b25      	ldr	r3, [pc, #148]	; (8001160 <__swsetup_r+0xd4>)
 80010ca:	429c      	cmp	r4, r3
 80010cc:	d101      	bne.n	80010d2 <__swsetup_r+0x46>
 80010ce:	68ac      	ldr	r4, [r5, #8]
 80010d0:	e7eb      	b.n	80010aa <__swsetup_r+0x1e>
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <__swsetup_r+0xd8>)
 80010d4:	429c      	cmp	r4, r3
 80010d6:	bf08      	it	eq
 80010d8:	68ec      	ldreq	r4, [r5, #12]
 80010da:	e7e6      	b.n	80010aa <__swsetup_r+0x1e>
 80010dc:	0758      	lsls	r0, r3, #29
 80010de:	d512      	bpl.n	8001106 <__swsetup_r+0x7a>
 80010e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010e2:	b141      	cbz	r1, 80010f6 <__swsetup_r+0x6a>
 80010e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010e8:	4299      	cmp	r1, r3
 80010ea:	d002      	beq.n	80010f2 <__swsetup_r+0x66>
 80010ec:	4630      	mov	r0, r6
 80010ee:	f7ff fdf1 	bl	8000cd4 <_free_r>
 80010f2:	2300      	movs	r3, #0
 80010f4:	6363      	str	r3, [r4, #52]	; 0x34
 80010f6:	89a3      	ldrh	r3, [r4, #12]
 80010f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80010fc:	81a3      	strh	r3, [r4, #12]
 80010fe:	2300      	movs	r3, #0
 8001100:	6063      	str	r3, [r4, #4]
 8001102:	6923      	ldr	r3, [r4, #16]
 8001104:	6023      	str	r3, [r4, #0]
 8001106:	89a3      	ldrh	r3, [r4, #12]
 8001108:	f043 0308 	orr.w	r3, r3, #8
 800110c:	81a3      	strh	r3, [r4, #12]
 800110e:	6923      	ldr	r3, [r4, #16]
 8001110:	b94b      	cbnz	r3, 8001126 <__swsetup_r+0x9a>
 8001112:	89a3      	ldrh	r3, [r4, #12]
 8001114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111c:	d003      	beq.n	8001126 <__swsetup_r+0x9a>
 800111e:	4621      	mov	r1, r4
 8001120:	4630      	mov	r0, r6
 8001122:	f000 f9ff 	bl	8001524 <__smakebuf_r>
 8001126:	89a0      	ldrh	r0, [r4, #12]
 8001128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800112c:	f010 0301 	ands.w	r3, r0, #1
 8001130:	d00a      	beq.n	8001148 <__swsetup_r+0xbc>
 8001132:	2300      	movs	r3, #0
 8001134:	60a3      	str	r3, [r4, #8]
 8001136:	6963      	ldr	r3, [r4, #20]
 8001138:	425b      	negs	r3, r3
 800113a:	61a3      	str	r3, [r4, #24]
 800113c:	6923      	ldr	r3, [r4, #16]
 800113e:	b943      	cbnz	r3, 8001152 <__swsetup_r+0xc6>
 8001140:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001144:	d1ba      	bne.n	80010bc <__swsetup_r+0x30>
 8001146:	bd70      	pop	{r4, r5, r6, pc}
 8001148:	0781      	lsls	r1, r0, #30
 800114a:	bf58      	it	pl
 800114c:	6963      	ldrpl	r3, [r4, #20]
 800114e:	60a3      	str	r3, [r4, #8]
 8001150:	e7f4      	b.n	800113c <__swsetup_r+0xb0>
 8001152:	2000      	movs	r0, #0
 8001154:	e7f7      	b.n	8001146 <__swsetup_r+0xba>
 8001156:	bf00      	nop
 8001158:	20000020 	.word	0x20000020
 800115c:	08001dfc 	.word	0x08001dfc
 8001160:	08001e1c 	.word	0x08001e1c
 8001164:	08001ddc 	.word	0x08001ddc

08001168 <__sflush_r>:
 8001168:	898a      	ldrh	r2, [r1, #12]
 800116a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800116e:	4605      	mov	r5, r0
 8001170:	0710      	lsls	r0, r2, #28
 8001172:	460c      	mov	r4, r1
 8001174:	d458      	bmi.n	8001228 <__sflush_r+0xc0>
 8001176:	684b      	ldr	r3, [r1, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	dc05      	bgt.n	8001188 <__sflush_r+0x20>
 800117c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800117e:	2b00      	cmp	r3, #0
 8001180:	dc02      	bgt.n	8001188 <__sflush_r+0x20>
 8001182:	2000      	movs	r0, #0
 8001184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800118a:	2e00      	cmp	r6, #0
 800118c:	d0f9      	beq.n	8001182 <__sflush_r+0x1a>
 800118e:	2300      	movs	r3, #0
 8001190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001194:	682f      	ldr	r7, [r5, #0]
 8001196:	602b      	str	r3, [r5, #0]
 8001198:	d032      	beq.n	8001200 <__sflush_r+0x98>
 800119a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800119c:	89a3      	ldrh	r3, [r4, #12]
 800119e:	075a      	lsls	r2, r3, #29
 80011a0:	d505      	bpl.n	80011ae <__sflush_r+0x46>
 80011a2:	6863      	ldr	r3, [r4, #4]
 80011a4:	1ac0      	subs	r0, r0, r3
 80011a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011a8:	b10b      	cbz	r3, 80011ae <__sflush_r+0x46>
 80011aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011ac:	1ac0      	subs	r0, r0, r3
 80011ae:	2300      	movs	r3, #0
 80011b0:	4602      	mov	r2, r0
 80011b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011b4:	6a21      	ldr	r1, [r4, #32]
 80011b6:	4628      	mov	r0, r5
 80011b8:	47b0      	blx	r6
 80011ba:	1c43      	adds	r3, r0, #1
 80011bc:	89a3      	ldrh	r3, [r4, #12]
 80011be:	d106      	bne.n	80011ce <__sflush_r+0x66>
 80011c0:	6829      	ldr	r1, [r5, #0]
 80011c2:	291d      	cmp	r1, #29
 80011c4:	d82c      	bhi.n	8001220 <__sflush_r+0xb8>
 80011c6:	4a2a      	ldr	r2, [pc, #168]	; (8001270 <__sflush_r+0x108>)
 80011c8:	40ca      	lsrs	r2, r1
 80011ca:	07d6      	lsls	r6, r2, #31
 80011cc:	d528      	bpl.n	8001220 <__sflush_r+0xb8>
 80011ce:	2200      	movs	r2, #0
 80011d0:	6062      	str	r2, [r4, #4]
 80011d2:	04d9      	lsls	r1, r3, #19
 80011d4:	6922      	ldr	r2, [r4, #16]
 80011d6:	6022      	str	r2, [r4, #0]
 80011d8:	d504      	bpl.n	80011e4 <__sflush_r+0x7c>
 80011da:	1c42      	adds	r2, r0, #1
 80011dc:	d101      	bne.n	80011e2 <__sflush_r+0x7a>
 80011de:	682b      	ldr	r3, [r5, #0]
 80011e0:	b903      	cbnz	r3, 80011e4 <__sflush_r+0x7c>
 80011e2:	6560      	str	r0, [r4, #84]	; 0x54
 80011e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011e6:	602f      	str	r7, [r5, #0]
 80011e8:	2900      	cmp	r1, #0
 80011ea:	d0ca      	beq.n	8001182 <__sflush_r+0x1a>
 80011ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011f0:	4299      	cmp	r1, r3
 80011f2:	d002      	beq.n	80011fa <__sflush_r+0x92>
 80011f4:	4628      	mov	r0, r5
 80011f6:	f7ff fd6d 	bl	8000cd4 <_free_r>
 80011fa:	2000      	movs	r0, #0
 80011fc:	6360      	str	r0, [r4, #52]	; 0x34
 80011fe:	e7c1      	b.n	8001184 <__sflush_r+0x1c>
 8001200:	6a21      	ldr	r1, [r4, #32]
 8001202:	2301      	movs	r3, #1
 8001204:	4628      	mov	r0, r5
 8001206:	47b0      	blx	r6
 8001208:	1c41      	adds	r1, r0, #1
 800120a:	d1c7      	bne.n	800119c <__sflush_r+0x34>
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0c4      	beq.n	800119c <__sflush_r+0x34>
 8001212:	2b1d      	cmp	r3, #29
 8001214:	d001      	beq.n	800121a <__sflush_r+0xb2>
 8001216:	2b16      	cmp	r3, #22
 8001218:	d101      	bne.n	800121e <__sflush_r+0xb6>
 800121a:	602f      	str	r7, [r5, #0]
 800121c:	e7b1      	b.n	8001182 <__sflush_r+0x1a>
 800121e:	89a3      	ldrh	r3, [r4, #12]
 8001220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001224:	81a3      	strh	r3, [r4, #12]
 8001226:	e7ad      	b.n	8001184 <__sflush_r+0x1c>
 8001228:	690f      	ldr	r7, [r1, #16]
 800122a:	2f00      	cmp	r7, #0
 800122c:	d0a9      	beq.n	8001182 <__sflush_r+0x1a>
 800122e:	0793      	lsls	r3, r2, #30
 8001230:	680e      	ldr	r6, [r1, #0]
 8001232:	bf08      	it	eq
 8001234:	694b      	ldreq	r3, [r1, #20]
 8001236:	600f      	str	r7, [r1, #0]
 8001238:	bf18      	it	ne
 800123a:	2300      	movne	r3, #0
 800123c:	eba6 0807 	sub.w	r8, r6, r7
 8001240:	608b      	str	r3, [r1, #8]
 8001242:	f1b8 0f00 	cmp.w	r8, #0
 8001246:	dd9c      	ble.n	8001182 <__sflush_r+0x1a>
 8001248:	6a21      	ldr	r1, [r4, #32]
 800124a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800124c:	4643      	mov	r3, r8
 800124e:	463a      	mov	r2, r7
 8001250:	4628      	mov	r0, r5
 8001252:	47b0      	blx	r6
 8001254:	2800      	cmp	r0, #0
 8001256:	dc06      	bgt.n	8001266 <__sflush_r+0xfe>
 8001258:	89a3      	ldrh	r3, [r4, #12]
 800125a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125e:	81a3      	strh	r3, [r4, #12]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001264:	e78e      	b.n	8001184 <__sflush_r+0x1c>
 8001266:	4407      	add	r7, r0
 8001268:	eba8 0800 	sub.w	r8, r8, r0
 800126c:	e7e9      	b.n	8001242 <__sflush_r+0xda>
 800126e:	bf00      	nop
 8001270:	20400001 	.word	0x20400001

08001274 <_fflush_r>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	690b      	ldr	r3, [r1, #16]
 8001278:	4605      	mov	r5, r0
 800127a:	460c      	mov	r4, r1
 800127c:	b913      	cbnz	r3, 8001284 <_fflush_r+0x10>
 800127e:	2500      	movs	r5, #0
 8001280:	4628      	mov	r0, r5
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	b118      	cbz	r0, 800128e <_fflush_r+0x1a>
 8001286:	6983      	ldr	r3, [r0, #24]
 8001288:	b90b      	cbnz	r3, 800128e <_fflush_r+0x1a>
 800128a:	f000 f887 	bl	800139c <__sinit>
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <_fflush_r+0x6c>)
 8001290:	429c      	cmp	r4, r3
 8001292:	d11b      	bne.n	80012cc <_fflush_r+0x58>
 8001294:	686c      	ldr	r4, [r5, #4]
 8001296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0ef      	beq.n	800127e <_fflush_r+0xa>
 800129e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012a0:	07d0      	lsls	r0, r2, #31
 80012a2:	d404      	bmi.n	80012ae <_fflush_r+0x3a>
 80012a4:	0599      	lsls	r1, r3, #22
 80012a6:	d402      	bmi.n	80012ae <_fflush_r+0x3a>
 80012a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012aa:	f000 f915 	bl	80014d8 <__retarget_lock_acquire_recursive>
 80012ae:	4628      	mov	r0, r5
 80012b0:	4621      	mov	r1, r4
 80012b2:	f7ff ff59 	bl	8001168 <__sflush_r>
 80012b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012b8:	07da      	lsls	r2, r3, #31
 80012ba:	4605      	mov	r5, r0
 80012bc:	d4e0      	bmi.n	8001280 <_fflush_r+0xc>
 80012be:	89a3      	ldrh	r3, [r4, #12]
 80012c0:	059b      	lsls	r3, r3, #22
 80012c2:	d4dd      	bmi.n	8001280 <_fflush_r+0xc>
 80012c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012c6:	f000 f908 	bl	80014da <__retarget_lock_release_recursive>
 80012ca:	e7d9      	b.n	8001280 <_fflush_r+0xc>
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <_fflush_r+0x70>)
 80012ce:	429c      	cmp	r4, r3
 80012d0:	d101      	bne.n	80012d6 <_fflush_r+0x62>
 80012d2:	68ac      	ldr	r4, [r5, #8]
 80012d4:	e7df      	b.n	8001296 <_fflush_r+0x22>
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <_fflush_r+0x74>)
 80012d8:	429c      	cmp	r4, r3
 80012da:	bf08      	it	eq
 80012dc:	68ec      	ldreq	r4, [r5, #12]
 80012de:	e7da      	b.n	8001296 <_fflush_r+0x22>
 80012e0:	08001dfc 	.word	0x08001dfc
 80012e4:	08001e1c 	.word	0x08001e1c
 80012e8:	08001ddc 	.word	0x08001ddc

080012ec <std>:
 80012ec:	2300      	movs	r3, #0
 80012ee:	b510      	push	{r4, lr}
 80012f0:	4604      	mov	r4, r0
 80012f2:	e9c0 3300 	strd	r3, r3, [r0]
 80012f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80012fa:	6083      	str	r3, [r0, #8]
 80012fc:	8181      	strh	r1, [r0, #12]
 80012fe:	6643      	str	r3, [r0, #100]	; 0x64
 8001300:	81c2      	strh	r2, [r0, #14]
 8001302:	6183      	str	r3, [r0, #24]
 8001304:	4619      	mov	r1, r3
 8001306:	2208      	movs	r2, #8
 8001308:	305c      	adds	r0, #92	; 0x5c
 800130a:	f7ff fcdb 	bl	8000cc4 <memset>
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <std+0x38>)
 8001310:	6263      	str	r3, [r4, #36]	; 0x24
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <std+0x3c>)
 8001314:	62a3      	str	r3, [r4, #40]	; 0x28
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <std+0x40>)
 8001318:	62e3      	str	r3, [r4, #44]	; 0x2c
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <std+0x44>)
 800131c:	6224      	str	r4, [r4, #32]
 800131e:	6323      	str	r3, [r4, #48]	; 0x30
 8001320:	bd10      	pop	{r4, pc}
 8001322:	bf00      	nop
 8001324:	08001b95 	.word	0x08001b95
 8001328:	08001bb7 	.word	0x08001bb7
 800132c:	08001bef 	.word	0x08001bef
 8001330:	08001c13 	.word	0x08001c13

08001334 <_cleanup_r>:
 8001334:	4901      	ldr	r1, [pc, #4]	; (800133c <_cleanup_r+0x8>)
 8001336:	f000 b8af 	b.w	8001498 <_fwalk_reent>
 800133a:	bf00      	nop
 800133c:	08001275 	.word	0x08001275

08001340 <__sfmoreglue>:
 8001340:	b570      	push	{r4, r5, r6, lr}
 8001342:	1e4a      	subs	r2, r1, #1
 8001344:	2568      	movs	r5, #104	; 0x68
 8001346:	4355      	muls	r5, r2
 8001348:	460e      	mov	r6, r1
 800134a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800134e:	f7ff fd0f 	bl	8000d70 <_malloc_r>
 8001352:	4604      	mov	r4, r0
 8001354:	b140      	cbz	r0, 8001368 <__sfmoreglue+0x28>
 8001356:	2100      	movs	r1, #0
 8001358:	e9c0 1600 	strd	r1, r6, [r0]
 800135c:	300c      	adds	r0, #12
 800135e:	60a0      	str	r0, [r4, #8]
 8001360:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001364:	f7ff fcae 	bl	8000cc4 <memset>
 8001368:	4620      	mov	r0, r4
 800136a:	bd70      	pop	{r4, r5, r6, pc}

0800136c <__sfp_lock_acquire>:
 800136c:	4801      	ldr	r0, [pc, #4]	; (8001374 <__sfp_lock_acquire+0x8>)
 800136e:	f000 b8b3 	b.w	80014d8 <__retarget_lock_acquire_recursive>
 8001372:	bf00      	nop
 8001374:	200000c4 	.word	0x200000c4

08001378 <__sfp_lock_release>:
 8001378:	4801      	ldr	r0, [pc, #4]	; (8001380 <__sfp_lock_release+0x8>)
 800137a:	f000 b8ae 	b.w	80014da <__retarget_lock_release_recursive>
 800137e:	bf00      	nop
 8001380:	200000c4 	.word	0x200000c4

08001384 <__sinit_lock_acquire>:
 8001384:	4801      	ldr	r0, [pc, #4]	; (800138c <__sinit_lock_acquire+0x8>)
 8001386:	f000 b8a7 	b.w	80014d8 <__retarget_lock_acquire_recursive>
 800138a:	bf00      	nop
 800138c:	200000bf 	.word	0x200000bf

08001390 <__sinit_lock_release>:
 8001390:	4801      	ldr	r0, [pc, #4]	; (8001398 <__sinit_lock_release+0x8>)
 8001392:	f000 b8a2 	b.w	80014da <__retarget_lock_release_recursive>
 8001396:	bf00      	nop
 8001398:	200000bf 	.word	0x200000bf

0800139c <__sinit>:
 800139c:	b510      	push	{r4, lr}
 800139e:	4604      	mov	r4, r0
 80013a0:	f7ff fff0 	bl	8001384 <__sinit_lock_acquire>
 80013a4:	69a3      	ldr	r3, [r4, #24]
 80013a6:	b11b      	cbz	r3, 80013b0 <__sinit+0x14>
 80013a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013ac:	f7ff bff0 	b.w	8001390 <__sinit_lock_release>
 80013b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80013b4:	6523      	str	r3, [r4, #80]	; 0x50
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <__sinit+0x68>)
 80013b8:	4a13      	ldr	r2, [pc, #76]	; (8001408 <__sinit+0x6c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80013be:	42a3      	cmp	r3, r4
 80013c0:	bf04      	itt	eq
 80013c2:	2301      	moveq	r3, #1
 80013c4:	61a3      	streq	r3, [r4, #24]
 80013c6:	4620      	mov	r0, r4
 80013c8:	f000 f820 	bl	800140c <__sfp>
 80013cc:	6060      	str	r0, [r4, #4]
 80013ce:	4620      	mov	r0, r4
 80013d0:	f000 f81c 	bl	800140c <__sfp>
 80013d4:	60a0      	str	r0, [r4, #8]
 80013d6:	4620      	mov	r0, r4
 80013d8:	f000 f818 	bl	800140c <__sfp>
 80013dc:	2200      	movs	r2, #0
 80013de:	60e0      	str	r0, [r4, #12]
 80013e0:	2104      	movs	r1, #4
 80013e2:	6860      	ldr	r0, [r4, #4]
 80013e4:	f7ff ff82 	bl	80012ec <std>
 80013e8:	68a0      	ldr	r0, [r4, #8]
 80013ea:	2201      	movs	r2, #1
 80013ec:	2109      	movs	r1, #9
 80013ee:	f7ff ff7d 	bl	80012ec <std>
 80013f2:	68e0      	ldr	r0, [r4, #12]
 80013f4:	2202      	movs	r2, #2
 80013f6:	2112      	movs	r1, #18
 80013f8:	f7ff ff78 	bl	80012ec <std>
 80013fc:	2301      	movs	r3, #1
 80013fe:	61a3      	str	r3, [r4, #24]
 8001400:	e7d2      	b.n	80013a8 <__sinit+0xc>
 8001402:	bf00      	nop
 8001404:	08001dd8 	.word	0x08001dd8
 8001408:	08001335 	.word	0x08001335

0800140c <__sfp>:
 800140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140e:	4607      	mov	r7, r0
 8001410:	f7ff ffac 	bl	800136c <__sfp_lock_acquire>
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <__sfp+0x84>)
 8001416:	681e      	ldr	r6, [r3, #0]
 8001418:	69b3      	ldr	r3, [r6, #24]
 800141a:	b913      	cbnz	r3, 8001422 <__sfp+0x16>
 800141c:	4630      	mov	r0, r6
 800141e:	f7ff ffbd 	bl	800139c <__sinit>
 8001422:	3648      	adds	r6, #72	; 0x48
 8001424:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001428:	3b01      	subs	r3, #1
 800142a:	d503      	bpl.n	8001434 <__sfp+0x28>
 800142c:	6833      	ldr	r3, [r6, #0]
 800142e:	b30b      	cbz	r3, 8001474 <__sfp+0x68>
 8001430:	6836      	ldr	r6, [r6, #0]
 8001432:	e7f7      	b.n	8001424 <__sfp+0x18>
 8001434:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001438:	b9d5      	cbnz	r5, 8001470 <__sfp+0x64>
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <__sfp+0x88>)
 800143c:	60e3      	str	r3, [r4, #12]
 800143e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001442:	6665      	str	r5, [r4, #100]	; 0x64
 8001444:	f000 f847 	bl	80014d6 <__retarget_lock_init_recursive>
 8001448:	f7ff ff96 	bl	8001378 <__sfp_lock_release>
 800144c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001450:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001454:	6025      	str	r5, [r4, #0]
 8001456:	61a5      	str	r5, [r4, #24]
 8001458:	2208      	movs	r2, #8
 800145a:	4629      	mov	r1, r5
 800145c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001460:	f7ff fc30 	bl	8000cc4 <memset>
 8001464:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001468:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800146c:	4620      	mov	r0, r4
 800146e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001470:	3468      	adds	r4, #104	; 0x68
 8001472:	e7d9      	b.n	8001428 <__sfp+0x1c>
 8001474:	2104      	movs	r1, #4
 8001476:	4638      	mov	r0, r7
 8001478:	f7ff ff62 	bl	8001340 <__sfmoreglue>
 800147c:	4604      	mov	r4, r0
 800147e:	6030      	str	r0, [r6, #0]
 8001480:	2800      	cmp	r0, #0
 8001482:	d1d5      	bne.n	8001430 <__sfp+0x24>
 8001484:	f7ff ff78 	bl	8001378 <__sfp_lock_release>
 8001488:	230c      	movs	r3, #12
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	e7ee      	b.n	800146c <__sfp+0x60>
 800148e:	bf00      	nop
 8001490:	08001dd8 	.word	0x08001dd8
 8001494:	ffff0001 	.word	0xffff0001

08001498 <_fwalk_reent>:
 8001498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800149c:	4606      	mov	r6, r0
 800149e:	4688      	mov	r8, r1
 80014a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80014a4:	2700      	movs	r7, #0
 80014a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80014aa:	f1b9 0901 	subs.w	r9, r9, #1
 80014ae:	d505      	bpl.n	80014bc <_fwalk_reent+0x24>
 80014b0:	6824      	ldr	r4, [r4, #0]
 80014b2:	2c00      	cmp	r4, #0
 80014b4:	d1f7      	bne.n	80014a6 <_fwalk_reent+0xe>
 80014b6:	4638      	mov	r0, r7
 80014b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014bc:	89ab      	ldrh	r3, [r5, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d907      	bls.n	80014d2 <_fwalk_reent+0x3a>
 80014c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014c6:	3301      	adds	r3, #1
 80014c8:	d003      	beq.n	80014d2 <_fwalk_reent+0x3a>
 80014ca:	4629      	mov	r1, r5
 80014cc:	4630      	mov	r0, r6
 80014ce:	47c0      	blx	r8
 80014d0:	4307      	orrs	r7, r0
 80014d2:	3568      	adds	r5, #104	; 0x68
 80014d4:	e7e9      	b.n	80014aa <_fwalk_reent+0x12>

080014d6 <__retarget_lock_init_recursive>:
 80014d6:	4770      	bx	lr

080014d8 <__retarget_lock_acquire_recursive>:
 80014d8:	4770      	bx	lr

080014da <__retarget_lock_release_recursive>:
 80014da:	4770      	bx	lr

080014dc <__swhatbuf_r>:
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	460e      	mov	r6, r1
 80014e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014e4:	2900      	cmp	r1, #0
 80014e6:	b096      	sub	sp, #88	; 0x58
 80014e8:	4614      	mov	r4, r2
 80014ea:	461d      	mov	r5, r3
 80014ec:	da07      	bge.n	80014fe <__swhatbuf_r+0x22>
 80014ee:	2300      	movs	r3, #0
 80014f0:	602b      	str	r3, [r5, #0]
 80014f2:	89b3      	ldrh	r3, [r6, #12]
 80014f4:	061a      	lsls	r2, r3, #24
 80014f6:	d410      	bmi.n	800151a <__swhatbuf_r+0x3e>
 80014f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fc:	e00e      	b.n	800151c <__swhatbuf_r+0x40>
 80014fe:	466a      	mov	r2, sp
 8001500:	f000 fbae 	bl	8001c60 <_fstat_r>
 8001504:	2800      	cmp	r0, #0
 8001506:	dbf2      	blt.n	80014ee <__swhatbuf_r+0x12>
 8001508:	9a01      	ldr	r2, [sp, #4]
 800150a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800150e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001512:	425a      	negs	r2, r3
 8001514:	415a      	adcs	r2, r3
 8001516:	602a      	str	r2, [r5, #0]
 8001518:	e7ee      	b.n	80014f8 <__swhatbuf_r+0x1c>
 800151a:	2340      	movs	r3, #64	; 0x40
 800151c:	2000      	movs	r0, #0
 800151e:	6023      	str	r3, [r4, #0]
 8001520:	b016      	add	sp, #88	; 0x58
 8001522:	bd70      	pop	{r4, r5, r6, pc}

08001524 <__smakebuf_r>:
 8001524:	898b      	ldrh	r3, [r1, #12]
 8001526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001528:	079d      	lsls	r5, r3, #30
 800152a:	4606      	mov	r6, r0
 800152c:	460c      	mov	r4, r1
 800152e:	d507      	bpl.n	8001540 <__smakebuf_r+0x1c>
 8001530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	6123      	str	r3, [r4, #16]
 8001538:	2301      	movs	r3, #1
 800153a:	6163      	str	r3, [r4, #20]
 800153c:	b002      	add	sp, #8
 800153e:	bd70      	pop	{r4, r5, r6, pc}
 8001540:	ab01      	add	r3, sp, #4
 8001542:	466a      	mov	r2, sp
 8001544:	f7ff ffca 	bl	80014dc <__swhatbuf_r>
 8001548:	9900      	ldr	r1, [sp, #0]
 800154a:	4605      	mov	r5, r0
 800154c:	4630      	mov	r0, r6
 800154e:	f7ff fc0f 	bl	8000d70 <_malloc_r>
 8001552:	b948      	cbnz	r0, 8001568 <__smakebuf_r+0x44>
 8001554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001558:	059a      	lsls	r2, r3, #22
 800155a:	d4ef      	bmi.n	800153c <__smakebuf_r+0x18>
 800155c:	f023 0303 	bic.w	r3, r3, #3
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	81a3      	strh	r3, [r4, #12]
 8001566:	e7e3      	b.n	8001530 <__smakebuf_r+0xc>
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <__smakebuf_r+0x7c>)
 800156a:	62b3      	str	r3, [r6, #40]	; 0x28
 800156c:	89a3      	ldrh	r3, [r4, #12]
 800156e:	6020      	str	r0, [r4, #0]
 8001570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001574:	81a3      	strh	r3, [r4, #12]
 8001576:	9b00      	ldr	r3, [sp, #0]
 8001578:	6163      	str	r3, [r4, #20]
 800157a:	9b01      	ldr	r3, [sp, #4]
 800157c:	6120      	str	r0, [r4, #16]
 800157e:	b15b      	cbz	r3, 8001598 <__smakebuf_r+0x74>
 8001580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001584:	4630      	mov	r0, r6
 8001586:	f000 fb7d 	bl	8001c84 <_isatty_r>
 800158a:	b128      	cbz	r0, 8001598 <__smakebuf_r+0x74>
 800158c:	89a3      	ldrh	r3, [r4, #12]
 800158e:	f023 0303 	bic.w	r3, r3, #3
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	81a3      	strh	r3, [r4, #12]
 8001598:	89a0      	ldrh	r0, [r4, #12]
 800159a:	4305      	orrs	r5, r0
 800159c:	81a5      	strh	r5, [r4, #12]
 800159e:	e7cd      	b.n	800153c <__smakebuf_r+0x18>
 80015a0:	08001335 	.word	0x08001335

080015a4 <__malloc_lock>:
 80015a4:	4801      	ldr	r0, [pc, #4]	; (80015ac <__malloc_lock+0x8>)
 80015a6:	f7ff bf97 	b.w	80014d8 <__retarget_lock_acquire_recursive>
 80015aa:	bf00      	nop
 80015ac:	200000c0 	.word	0x200000c0

080015b0 <__malloc_unlock>:
 80015b0:	4801      	ldr	r0, [pc, #4]	; (80015b8 <__malloc_unlock+0x8>)
 80015b2:	f7ff bf92 	b.w	80014da <__retarget_lock_release_recursive>
 80015b6:	bf00      	nop
 80015b8:	200000c0 	.word	0x200000c0

080015bc <__sfputc_r>:
 80015bc:	6893      	ldr	r3, [r2, #8]
 80015be:	3b01      	subs	r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	b410      	push	{r4}
 80015c4:	6093      	str	r3, [r2, #8]
 80015c6:	da07      	bge.n	80015d8 <__sfputc_r+0x1c>
 80015c8:	6994      	ldr	r4, [r2, #24]
 80015ca:	42a3      	cmp	r3, r4
 80015cc:	db01      	blt.n	80015d2 <__sfputc_r+0x16>
 80015ce:	290a      	cmp	r1, #10
 80015d0:	d102      	bne.n	80015d8 <__sfputc_r+0x1c>
 80015d2:	bc10      	pop	{r4}
 80015d4:	f7ff bd08 	b.w	8000fe8 <__swbuf_r>
 80015d8:	6813      	ldr	r3, [r2, #0]
 80015da:	1c58      	adds	r0, r3, #1
 80015dc:	6010      	str	r0, [r2, #0]
 80015de:	7019      	strb	r1, [r3, #0]
 80015e0:	4608      	mov	r0, r1
 80015e2:	bc10      	pop	{r4}
 80015e4:	4770      	bx	lr

080015e6 <__sfputs_r>:
 80015e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e8:	4606      	mov	r6, r0
 80015ea:	460f      	mov	r7, r1
 80015ec:	4614      	mov	r4, r2
 80015ee:	18d5      	adds	r5, r2, r3
 80015f0:	42ac      	cmp	r4, r5
 80015f2:	d101      	bne.n	80015f8 <__sfputs_r+0x12>
 80015f4:	2000      	movs	r0, #0
 80015f6:	e007      	b.n	8001608 <__sfputs_r+0x22>
 80015f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015fc:	463a      	mov	r2, r7
 80015fe:	4630      	mov	r0, r6
 8001600:	f7ff ffdc 	bl	80015bc <__sfputc_r>
 8001604:	1c43      	adds	r3, r0, #1
 8001606:	d1f3      	bne.n	80015f0 <__sfputs_r+0xa>
 8001608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800160c <_vfiprintf_r>:
 800160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001610:	460d      	mov	r5, r1
 8001612:	b09d      	sub	sp, #116	; 0x74
 8001614:	4614      	mov	r4, r2
 8001616:	4698      	mov	r8, r3
 8001618:	4606      	mov	r6, r0
 800161a:	b118      	cbz	r0, 8001624 <_vfiprintf_r+0x18>
 800161c:	6983      	ldr	r3, [r0, #24]
 800161e:	b90b      	cbnz	r3, 8001624 <_vfiprintf_r+0x18>
 8001620:	f7ff febc 	bl	800139c <__sinit>
 8001624:	4b89      	ldr	r3, [pc, #548]	; (800184c <_vfiprintf_r+0x240>)
 8001626:	429d      	cmp	r5, r3
 8001628:	d11b      	bne.n	8001662 <_vfiprintf_r+0x56>
 800162a:	6875      	ldr	r5, [r6, #4]
 800162c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800162e:	07d9      	lsls	r1, r3, #31
 8001630:	d405      	bmi.n	800163e <_vfiprintf_r+0x32>
 8001632:	89ab      	ldrh	r3, [r5, #12]
 8001634:	059a      	lsls	r2, r3, #22
 8001636:	d402      	bmi.n	800163e <_vfiprintf_r+0x32>
 8001638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800163a:	f7ff ff4d 	bl	80014d8 <__retarget_lock_acquire_recursive>
 800163e:	89ab      	ldrh	r3, [r5, #12]
 8001640:	071b      	lsls	r3, r3, #28
 8001642:	d501      	bpl.n	8001648 <_vfiprintf_r+0x3c>
 8001644:	692b      	ldr	r3, [r5, #16]
 8001646:	b9eb      	cbnz	r3, 8001684 <_vfiprintf_r+0x78>
 8001648:	4629      	mov	r1, r5
 800164a:	4630      	mov	r0, r6
 800164c:	f7ff fd1e 	bl	800108c <__swsetup_r>
 8001650:	b1c0      	cbz	r0, 8001684 <_vfiprintf_r+0x78>
 8001652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001654:	07dc      	lsls	r4, r3, #31
 8001656:	d50e      	bpl.n	8001676 <_vfiprintf_r+0x6a>
 8001658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800165c:	b01d      	add	sp, #116	; 0x74
 800165e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001662:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <_vfiprintf_r+0x244>)
 8001664:	429d      	cmp	r5, r3
 8001666:	d101      	bne.n	800166c <_vfiprintf_r+0x60>
 8001668:	68b5      	ldr	r5, [r6, #8]
 800166a:	e7df      	b.n	800162c <_vfiprintf_r+0x20>
 800166c:	4b79      	ldr	r3, [pc, #484]	; (8001854 <_vfiprintf_r+0x248>)
 800166e:	429d      	cmp	r5, r3
 8001670:	bf08      	it	eq
 8001672:	68f5      	ldreq	r5, [r6, #12]
 8001674:	e7da      	b.n	800162c <_vfiprintf_r+0x20>
 8001676:	89ab      	ldrh	r3, [r5, #12]
 8001678:	0598      	lsls	r0, r3, #22
 800167a:	d4ed      	bmi.n	8001658 <_vfiprintf_r+0x4c>
 800167c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800167e:	f7ff ff2c 	bl	80014da <__retarget_lock_release_recursive>
 8001682:	e7e9      	b.n	8001658 <_vfiprintf_r+0x4c>
 8001684:	2300      	movs	r3, #0
 8001686:	9309      	str	r3, [sp, #36]	; 0x24
 8001688:	2320      	movs	r3, #32
 800168a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800168e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001692:	2330      	movs	r3, #48	; 0x30
 8001694:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001858 <_vfiprintf_r+0x24c>
 8001698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800169c:	f04f 0901 	mov.w	r9, #1
 80016a0:	4623      	mov	r3, r4
 80016a2:	469a      	mov	sl, r3
 80016a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016a8:	b10a      	cbz	r2, 80016ae <_vfiprintf_r+0xa2>
 80016aa:	2a25      	cmp	r2, #37	; 0x25
 80016ac:	d1f9      	bne.n	80016a2 <_vfiprintf_r+0x96>
 80016ae:	ebba 0b04 	subs.w	fp, sl, r4
 80016b2:	d00b      	beq.n	80016cc <_vfiprintf_r+0xc0>
 80016b4:	465b      	mov	r3, fp
 80016b6:	4622      	mov	r2, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	4630      	mov	r0, r6
 80016bc:	f7ff ff93 	bl	80015e6 <__sfputs_r>
 80016c0:	3001      	adds	r0, #1
 80016c2:	f000 80aa 	beq.w	800181a <_vfiprintf_r+0x20e>
 80016c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016c8:	445a      	add	r2, fp
 80016ca:	9209      	str	r2, [sp, #36]	; 0x24
 80016cc:	f89a 3000 	ldrb.w	r3, [sl]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a2 	beq.w	800181a <_vfiprintf_r+0x20e>
 80016d6:	2300      	movs	r3, #0
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016e0:	f10a 0a01 	add.w	sl, sl, #1
 80016e4:	9304      	str	r3, [sp, #16]
 80016e6:	9307      	str	r3, [sp, #28]
 80016e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80016ec:	931a      	str	r3, [sp, #104]	; 0x68
 80016ee:	4654      	mov	r4, sl
 80016f0:	2205      	movs	r2, #5
 80016f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016f6:	4858      	ldr	r0, [pc, #352]	; (8001858 <_vfiprintf_r+0x24c>)
 80016f8:	f7fe fd7a 	bl	80001f0 <memchr>
 80016fc:	9a04      	ldr	r2, [sp, #16]
 80016fe:	b9d8      	cbnz	r0, 8001738 <_vfiprintf_r+0x12c>
 8001700:	06d1      	lsls	r1, r2, #27
 8001702:	bf44      	itt	mi
 8001704:	2320      	movmi	r3, #32
 8001706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800170a:	0713      	lsls	r3, r2, #28
 800170c:	bf44      	itt	mi
 800170e:	232b      	movmi	r3, #43	; 0x2b
 8001710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001714:	f89a 3000 	ldrb.w	r3, [sl]
 8001718:	2b2a      	cmp	r3, #42	; 0x2a
 800171a:	d015      	beq.n	8001748 <_vfiprintf_r+0x13c>
 800171c:	9a07      	ldr	r2, [sp, #28]
 800171e:	4654      	mov	r4, sl
 8001720:	2000      	movs	r0, #0
 8001722:	f04f 0c0a 	mov.w	ip, #10
 8001726:	4621      	mov	r1, r4
 8001728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800172c:	3b30      	subs	r3, #48	; 0x30
 800172e:	2b09      	cmp	r3, #9
 8001730:	d94e      	bls.n	80017d0 <_vfiprintf_r+0x1c4>
 8001732:	b1b0      	cbz	r0, 8001762 <_vfiprintf_r+0x156>
 8001734:	9207      	str	r2, [sp, #28]
 8001736:	e014      	b.n	8001762 <_vfiprintf_r+0x156>
 8001738:	eba0 0308 	sub.w	r3, r0, r8
 800173c:	fa09 f303 	lsl.w	r3, r9, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	9304      	str	r3, [sp, #16]
 8001744:	46a2      	mov	sl, r4
 8001746:	e7d2      	b.n	80016ee <_vfiprintf_r+0xe2>
 8001748:	9b03      	ldr	r3, [sp, #12]
 800174a:	1d19      	adds	r1, r3, #4
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	9103      	str	r1, [sp, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	bfbb      	ittet	lt
 8001754:	425b      	neglt	r3, r3
 8001756:	f042 0202 	orrlt.w	r2, r2, #2
 800175a:	9307      	strge	r3, [sp, #28]
 800175c:	9307      	strlt	r3, [sp, #28]
 800175e:	bfb8      	it	lt
 8001760:	9204      	strlt	r2, [sp, #16]
 8001762:	7823      	ldrb	r3, [r4, #0]
 8001764:	2b2e      	cmp	r3, #46	; 0x2e
 8001766:	d10c      	bne.n	8001782 <_vfiprintf_r+0x176>
 8001768:	7863      	ldrb	r3, [r4, #1]
 800176a:	2b2a      	cmp	r3, #42	; 0x2a
 800176c:	d135      	bne.n	80017da <_vfiprintf_r+0x1ce>
 800176e:	9b03      	ldr	r3, [sp, #12]
 8001770:	1d1a      	adds	r2, r3, #4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	9203      	str	r2, [sp, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	bfb8      	it	lt
 800177a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800177e:	3402      	adds	r4, #2
 8001780:	9305      	str	r3, [sp, #20]
 8001782:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001868 <_vfiprintf_r+0x25c>
 8001786:	7821      	ldrb	r1, [r4, #0]
 8001788:	2203      	movs	r2, #3
 800178a:	4650      	mov	r0, sl
 800178c:	f7fe fd30 	bl	80001f0 <memchr>
 8001790:	b140      	cbz	r0, 80017a4 <_vfiprintf_r+0x198>
 8001792:	2340      	movs	r3, #64	; 0x40
 8001794:	eba0 000a 	sub.w	r0, r0, sl
 8001798:	fa03 f000 	lsl.w	r0, r3, r0
 800179c:	9b04      	ldr	r3, [sp, #16]
 800179e:	4303      	orrs	r3, r0
 80017a0:	3401      	adds	r4, #1
 80017a2:	9304      	str	r3, [sp, #16]
 80017a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017a8:	482c      	ldr	r0, [pc, #176]	; (800185c <_vfiprintf_r+0x250>)
 80017aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017ae:	2206      	movs	r2, #6
 80017b0:	f7fe fd1e 	bl	80001f0 <memchr>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d03f      	beq.n	8001838 <_vfiprintf_r+0x22c>
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <_vfiprintf_r+0x254>)
 80017ba:	bb1b      	cbnz	r3, 8001804 <_vfiprintf_r+0x1f8>
 80017bc:	9b03      	ldr	r3, [sp, #12]
 80017be:	3307      	adds	r3, #7
 80017c0:	f023 0307 	bic.w	r3, r3, #7
 80017c4:	3308      	adds	r3, #8
 80017c6:	9303      	str	r3, [sp, #12]
 80017c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017ca:	443b      	add	r3, r7
 80017cc:	9309      	str	r3, [sp, #36]	; 0x24
 80017ce:	e767      	b.n	80016a0 <_vfiprintf_r+0x94>
 80017d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80017d4:	460c      	mov	r4, r1
 80017d6:	2001      	movs	r0, #1
 80017d8:	e7a5      	b.n	8001726 <_vfiprintf_r+0x11a>
 80017da:	2300      	movs	r3, #0
 80017dc:	3401      	adds	r4, #1
 80017de:	9305      	str	r3, [sp, #20]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f04f 0c0a 	mov.w	ip, #10
 80017e6:	4620      	mov	r0, r4
 80017e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017ec:	3a30      	subs	r2, #48	; 0x30
 80017ee:	2a09      	cmp	r2, #9
 80017f0:	d903      	bls.n	80017fa <_vfiprintf_r+0x1ee>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0c5      	beq.n	8001782 <_vfiprintf_r+0x176>
 80017f6:	9105      	str	r1, [sp, #20]
 80017f8:	e7c3      	b.n	8001782 <_vfiprintf_r+0x176>
 80017fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80017fe:	4604      	mov	r4, r0
 8001800:	2301      	movs	r3, #1
 8001802:	e7f0      	b.n	80017e6 <_vfiprintf_r+0x1da>
 8001804:	ab03      	add	r3, sp, #12
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	462a      	mov	r2, r5
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <_vfiprintf_r+0x258>)
 800180c:	a904      	add	r1, sp, #16
 800180e:	4630      	mov	r0, r6
 8001810:	f3af 8000 	nop.w
 8001814:	4607      	mov	r7, r0
 8001816:	1c78      	adds	r0, r7, #1
 8001818:	d1d6      	bne.n	80017c8 <_vfiprintf_r+0x1bc>
 800181a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800181c:	07d9      	lsls	r1, r3, #31
 800181e:	d405      	bmi.n	800182c <_vfiprintf_r+0x220>
 8001820:	89ab      	ldrh	r3, [r5, #12]
 8001822:	059a      	lsls	r2, r3, #22
 8001824:	d402      	bmi.n	800182c <_vfiprintf_r+0x220>
 8001826:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001828:	f7ff fe57 	bl	80014da <__retarget_lock_release_recursive>
 800182c:	89ab      	ldrh	r3, [r5, #12]
 800182e:	065b      	lsls	r3, r3, #25
 8001830:	f53f af12 	bmi.w	8001658 <_vfiprintf_r+0x4c>
 8001834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001836:	e711      	b.n	800165c <_vfiprintf_r+0x50>
 8001838:	ab03      	add	r3, sp, #12
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	462a      	mov	r2, r5
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <_vfiprintf_r+0x258>)
 8001840:	a904      	add	r1, sp, #16
 8001842:	4630      	mov	r0, r6
 8001844:	f000 f880 	bl	8001948 <_printf_i>
 8001848:	e7e4      	b.n	8001814 <_vfiprintf_r+0x208>
 800184a:	bf00      	nop
 800184c:	08001dfc 	.word	0x08001dfc
 8001850:	08001e1c 	.word	0x08001e1c
 8001854:	08001ddc 	.word	0x08001ddc
 8001858:	08001e3c 	.word	0x08001e3c
 800185c:	08001e46 	.word	0x08001e46
 8001860:	00000000 	.word	0x00000000
 8001864:	080015e7 	.word	0x080015e7
 8001868:	08001e42 	.word	0x08001e42

0800186c <_printf_common>:
 800186c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001870:	4616      	mov	r6, r2
 8001872:	4699      	mov	r9, r3
 8001874:	688a      	ldr	r2, [r1, #8]
 8001876:	690b      	ldr	r3, [r1, #16]
 8001878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800187c:	4293      	cmp	r3, r2
 800187e:	bfb8      	it	lt
 8001880:	4613      	movlt	r3, r2
 8001882:	6033      	str	r3, [r6, #0]
 8001884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001888:	4607      	mov	r7, r0
 800188a:	460c      	mov	r4, r1
 800188c:	b10a      	cbz	r2, 8001892 <_printf_common+0x26>
 800188e:	3301      	adds	r3, #1
 8001890:	6033      	str	r3, [r6, #0]
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	0699      	lsls	r1, r3, #26
 8001896:	bf42      	ittt	mi
 8001898:	6833      	ldrmi	r3, [r6, #0]
 800189a:	3302      	addmi	r3, #2
 800189c:	6033      	strmi	r3, [r6, #0]
 800189e:	6825      	ldr	r5, [r4, #0]
 80018a0:	f015 0506 	ands.w	r5, r5, #6
 80018a4:	d106      	bne.n	80018b4 <_printf_common+0x48>
 80018a6:	f104 0a19 	add.w	sl, r4, #25
 80018aa:	68e3      	ldr	r3, [r4, #12]
 80018ac:	6832      	ldr	r2, [r6, #0]
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	42ab      	cmp	r3, r5
 80018b2:	dc26      	bgt.n	8001902 <_printf_common+0x96>
 80018b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80018b8:	1e13      	subs	r3, r2, #0
 80018ba:	6822      	ldr	r2, [r4, #0]
 80018bc:	bf18      	it	ne
 80018be:	2301      	movne	r3, #1
 80018c0:	0692      	lsls	r2, r2, #26
 80018c2:	d42b      	bmi.n	800191c <_printf_common+0xb0>
 80018c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80018c8:	4649      	mov	r1, r9
 80018ca:	4638      	mov	r0, r7
 80018cc:	47c0      	blx	r8
 80018ce:	3001      	adds	r0, #1
 80018d0:	d01e      	beq.n	8001910 <_printf_common+0xa4>
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	68e5      	ldr	r5, [r4, #12]
 80018d6:	6832      	ldr	r2, [r6, #0]
 80018d8:	f003 0306 	and.w	r3, r3, #6
 80018dc:	2b04      	cmp	r3, #4
 80018de:	bf08      	it	eq
 80018e0:	1aad      	subeq	r5, r5, r2
 80018e2:	68a3      	ldr	r3, [r4, #8]
 80018e4:	6922      	ldr	r2, [r4, #16]
 80018e6:	bf0c      	ite	eq
 80018e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018ec:	2500      	movne	r5, #0
 80018ee:	4293      	cmp	r3, r2
 80018f0:	bfc4      	itt	gt
 80018f2:	1a9b      	subgt	r3, r3, r2
 80018f4:	18ed      	addgt	r5, r5, r3
 80018f6:	2600      	movs	r6, #0
 80018f8:	341a      	adds	r4, #26
 80018fa:	42b5      	cmp	r5, r6
 80018fc:	d11a      	bne.n	8001934 <_printf_common+0xc8>
 80018fe:	2000      	movs	r0, #0
 8001900:	e008      	b.n	8001914 <_printf_common+0xa8>
 8001902:	2301      	movs	r3, #1
 8001904:	4652      	mov	r2, sl
 8001906:	4649      	mov	r1, r9
 8001908:	4638      	mov	r0, r7
 800190a:	47c0      	blx	r8
 800190c:	3001      	adds	r0, #1
 800190e:	d103      	bne.n	8001918 <_printf_common+0xac>
 8001910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001918:	3501      	adds	r5, #1
 800191a:	e7c6      	b.n	80018aa <_printf_common+0x3e>
 800191c:	18e1      	adds	r1, r4, r3
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	2030      	movs	r0, #48	; 0x30
 8001922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001926:	4422      	add	r2, r4
 8001928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800192c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001930:	3302      	adds	r3, #2
 8001932:	e7c7      	b.n	80018c4 <_printf_common+0x58>
 8001934:	2301      	movs	r3, #1
 8001936:	4622      	mov	r2, r4
 8001938:	4649      	mov	r1, r9
 800193a:	4638      	mov	r0, r7
 800193c:	47c0      	blx	r8
 800193e:	3001      	adds	r0, #1
 8001940:	d0e6      	beq.n	8001910 <_printf_common+0xa4>
 8001942:	3601      	adds	r6, #1
 8001944:	e7d9      	b.n	80018fa <_printf_common+0x8e>
	...

08001948 <_printf_i>:
 8001948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800194c:	460c      	mov	r4, r1
 800194e:	4691      	mov	r9, r2
 8001950:	7e27      	ldrb	r7, [r4, #24]
 8001952:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001954:	2f78      	cmp	r7, #120	; 0x78
 8001956:	4680      	mov	r8, r0
 8001958:	469a      	mov	sl, r3
 800195a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800195e:	d807      	bhi.n	8001970 <_printf_i+0x28>
 8001960:	2f62      	cmp	r7, #98	; 0x62
 8001962:	d80a      	bhi.n	800197a <_printf_i+0x32>
 8001964:	2f00      	cmp	r7, #0
 8001966:	f000 80d8 	beq.w	8001b1a <_printf_i+0x1d2>
 800196a:	2f58      	cmp	r7, #88	; 0x58
 800196c:	f000 80a3 	beq.w	8001ab6 <_printf_i+0x16e>
 8001970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001978:	e03a      	b.n	80019f0 <_printf_i+0xa8>
 800197a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800197e:	2b15      	cmp	r3, #21
 8001980:	d8f6      	bhi.n	8001970 <_printf_i+0x28>
 8001982:	a001      	add	r0, pc, #4	; (adr r0, 8001988 <_printf_i+0x40>)
 8001984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001988:	080019e1 	.word	0x080019e1
 800198c:	080019f5 	.word	0x080019f5
 8001990:	08001971 	.word	0x08001971
 8001994:	08001971 	.word	0x08001971
 8001998:	08001971 	.word	0x08001971
 800199c:	08001971 	.word	0x08001971
 80019a0:	080019f5 	.word	0x080019f5
 80019a4:	08001971 	.word	0x08001971
 80019a8:	08001971 	.word	0x08001971
 80019ac:	08001971 	.word	0x08001971
 80019b0:	08001971 	.word	0x08001971
 80019b4:	08001b01 	.word	0x08001b01
 80019b8:	08001a25 	.word	0x08001a25
 80019bc:	08001ae3 	.word	0x08001ae3
 80019c0:	08001971 	.word	0x08001971
 80019c4:	08001971 	.word	0x08001971
 80019c8:	08001b23 	.word	0x08001b23
 80019cc:	08001971 	.word	0x08001971
 80019d0:	08001a25 	.word	0x08001a25
 80019d4:	08001971 	.word	0x08001971
 80019d8:	08001971 	.word	0x08001971
 80019dc:	08001aeb 	.word	0x08001aeb
 80019e0:	680b      	ldr	r3, [r1, #0]
 80019e2:	1d1a      	adds	r2, r3, #4
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	600a      	str	r2, [r1, #0]
 80019e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80019ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0a3      	b.n	8001b3c <_printf_i+0x1f4>
 80019f4:	6825      	ldr	r5, [r4, #0]
 80019f6:	6808      	ldr	r0, [r1, #0]
 80019f8:	062e      	lsls	r6, r5, #24
 80019fa:	f100 0304 	add.w	r3, r0, #4
 80019fe:	d50a      	bpl.n	8001a16 <_printf_i+0xce>
 8001a00:	6805      	ldr	r5, [r0, #0]
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	2d00      	cmp	r5, #0
 8001a06:	da03      	bge.n	8001a10 <_printf_i+0xc8>
 8001a08:	232d      	movs	r3, #45	; 0x2d
 8001a0a:	426d      	negs	r5, r5
 8001a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a10:	485e      	ldr	r0, [pc, #376]	; (8001b8c <_printf_i+0x244>)
 8001a12:	230a      	movs	r3, #10
 8001a14:	e019      	b.n	8001a4a <_printf_i+0x102>
 8001a16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001a1a:	6805      	ldr	r5, [r0, #0]
 8001a1c:	600b      	str	r3, [r1, #0]
 8001a1e:	bf18      	it	ne
 8001a20:	b22d      	sxthne	r5, r5
 8001a22:	e7ef      	b.n	8001a04 <_printf_i+0xbc>
 8001a24:	680b      	ldr	r3, [r1, #0]
 8001a26:	6825      	ldr	r5, [r4, #0]
 8001a28:	1d18      	adds	r0, r3, #4
 8001a2a:	6008      	str	r0, [r1, #0]
 8001a2c:	0628      	lsls	r0, r5, #24
 8001a2e:	d501      	bpl.n	8001a34 <_printf_i+0xec>
 8001a30:	681d      	ldr	r5, [r3, #0]
 8001a32:	e002      	b.n	8001a3a <_printf_i+0xf2>
 8001a34:	0669      	lsls	r1, r5, #25
 8001a36:	d5fb      	bpl.n	8001a30 <_printf_i+0xe8>
 8001a38:	881d      	ldrh	r5, [r3, #0]
 8001a3a:	4854      	ldr	r0, [pc, #336]	; (8001b8c <_printf_i+0x244>)
 8001a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8001a3e:	bf0c      	ite	eq
 8001a40:	2308      	moveq	r3, #8
 8001a42:	230a      	movne	r3, #10
 8001a44:	2100      	movs	r1, #0
 8001a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a4a:	6866      	ldr	r6, [r4, #4]
 8001a4c:	60a6      	str	r6, [r4, #8]
 8001a4e:	2e00      	cmp	r6, #0
 8001a50:	bfa2      	ittt	ge
 8001a52:	6821      	ldrge	r1, [r4, #0]
 8001a54:	f021 0104 	bicge.w	r1, r1, #4
 8001a58:	6021      	strge	r1, [r4, #0]
 8001a5a:	b90d      	cbnz	r5, 8001a60 <_printf_i+0x118>
 8001a5c:	2e00      	cmp	r6, #0
 8001a5e:	d04d      	beq.n	8001afc <_printf_i+0x1b4>
 8001a60:	4616      	mov	r6, r2
 8001a62:	fbb5 f1f3 	udiv	r1, r5, r3
 8001a66:	fb03 5711 	mls	r7, r3, r1, r5
 8001a6a:	5dc7      	ldrb	r7, [r0, r7]
 8001a6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001a70:	462f      	mov	r7, r5
 8001a72:	42bb      	cmp	r3, r7
 8001a74:	460d      	mov	r5, r1
 8001a76:	d9f4      	bls.n	8001a62 <_printf_i+0x11a>
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d10b      	bne.n	8001a94 <_printf_i+0x14c>
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	07df      	lsls	r7, r3, #31
 8001a80:	d508      	bpl.n	8001a94 <_printf_i+0x14c>
 8001a82:	6923      	ldr	r3, [r4, #16]
 8001a84:	6861      	ldr	r1, [r4, #4]
 8001a86:	4299      	cmp	r1, r3
 8001a88:	bfde      	ittt	le
 8001a8a:	2330      	movle	r3, #48	; 0x30
 8001a8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001a90:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8001a94:	1b92      	subs	r2, r2, r6
 8001a96:	6122      	str	r2, [r4, #16]
 8001a98:	f8cd a000 	str.w	sl, [sp]
 8001a9c:	464b      	mov	r3, r9
 8001a9e:	aa03      	add	r2, sp, #12
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	4640      	mov	r0, r8
 8001aa4:	f7ff fee2 	bl	800186c <_printf_common>
 8001aa8:	3001      	adds	r0, #1
 8001aaa:	d14c      	bne.n	8001b46 <_printf_i+0x1fe>
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab0:	b004      	add	sp, #16
 8001ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ab6:	4835      	ldr	r0, [pc, #212]	; (8001b8c <_printf_i+0x244>)
 8001ab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	680e      	ldr	r6, [r1, #0]
 8001ac0:	061f      	lsls	r7, r3, #24
 8001ac2:	f856 5b04 	ldr.w	r5, [r6], #4
 8001ac6:	600e      	str	r6, [r1, #0]
 8001ac8:	d514      	bpl.n	8001af4 <_printf_i+0x1ac>
 8001aca:	07d9      	lsls	r1, r3, #31
 8001acc:	bf44      	itt	mi
 8001ace:	f043 0320 	orrmi.w	r3, r3, #32
 8001ad2:	6023      	strmi	r3, [r4, #0]
 8001ad4:	b91d      	cbnz	r5, 8001ade <_printf_i+0x196>
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	f023 0320 	bic.w	r3, r3, #32
 8001adc:	6023      	str	r3, [r4, #0]
 8001ade:	2310      	movs	r3, #16
 8001ae0:	e7b0      	b.n	8001a44 <_printf_i+0xfc>
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	f043 0320 	orr.w	r3, r3, #32
 8001ae8:	6023      	str	r3, [r4, #0]
 8001aea:	2378      	movs	r3, #120	; 0x78
 8001aec:	4828      	ldr	r0, [pc, #160]	; (8001b90 <_printf_i+0x248>)
 8001aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001af2:	e7e3      	b.n	8001abc <_printf_i+0x174>
 8001af4:	065e      	lsls	r6, r3, #25
 8001af6:	bf48      	it	mi
 8001af8:	b2ad      	uxthmi	r5, r5
 8001afa:	e7e6      	b.n	8001aca <_printf_i+0x182>
 8001afc:	4616      	mov	r6, r2
 8001afe:	e7bb      	b.n	8001a78 <_printf_i+0x130>
 8001b00:	680b      	ldr	r3, [r1, #0]
 8001b02:	6826      	ldr	r6, [r4, #0]
 8001b04:	6960      	ldr	r0, [r4, #20]
 8001b06:	1d1d      	adds	r5, r3, #4
 8001b08:	600d      	str	r5, [r1, #0]
 8001b0a:	0635      	lsls	r5, r6, #24
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	d501      	bpl.n	8001b14 <_printf_i+0x1cc>
 8001b10:	6018      	str	r0, [r3, #0]
 8001b12:	e002      	b.n	8001b1a <_printf_i+0x1d2>
 8001b14:	0671      	lsls	r1, r6, #25
 8001b16:	d5fb      	bpl.n	8001b10 <_printf_i+0x1c8>
 8001b18:	8018      	strh	r0, [r3, #0]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	6123      	str	r3, [r4, #16]
 8001b1e:	4616      	mov	r6, r2
 8001b20:	e7ba      	b.n	8001a98 <_printf_i+0x150>
 8001b22:	680b      	ldr	r3, [r1, #0]
 8001b24:	1d1a      	adds	r2, r3, #4
 8001b26:	600a      	str	r2, [r1, #0]
 8001b28:	681e      	ldr	r6, [r3, #0]
 8001b2a:	6862      	ldr	r2, [r4, #4]
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4630      	mov	r0, r6
 8001b30:	f7fe fb5e 	bl	80001f0 <memchr>
 8001b34:	b108      	cbz	r0, 8001b3a <_printf_i+0x1f2>
 8001b36:	1b80      	subs	r0, r0, r6
 8001b38:	6060      	str	r0, [r4, #4]
 8001b3a:	6863      	ldr	r3, [r4, #4]
 8001b3c:	6123      	str	r3, [r4, #16]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b44:	e7a8      	b.n	8001a98 <_printf_i+0x150>
 8001b46:	6923      	ldr	r3, [r4, #16]
 8001b48:	4632      	mov	r2, r6
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	4640      	mov	r0, r8
 8001b4e:	47d0      	blx	sl
 8001b50:	3001      	adds	r0, #1
 8001b52:	d0ab      	beq.n	8001aac <_printf_i+0x164>
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	079b      	lsls	r3, r3, #30
 8001b58:	d413      	bmi.n	8001b82 <_printf_i+0x23a>
 8001b5a:	68e0      	ldr	r0, [r4, #12]
 8001b5c:	9b03      	ldr	r3, [sp, #12]
 8001b5e:	4298      	cmp	r0, r3
 8001b60:	bfb8      	it	lt
 8001b62:	4618      	movlt	r0, r3
 8001b64:	e7a4      	b.n	8001ab0 <_printf_i+0x168>
 8001b66:	2301      	movs	r3, #1
 8001b68:	4632      	mov	r2, r6
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	4640      	mov	r0, r8
 8001b6e:	47d0      	blx	sl
 8001b70:	3001      	adds	r0, #1
 8001b72:	d09b      	beq.n	8001aac <_printf_i+0x164>
 8001b74:	3501      	adds	r5, #1
 8001b76:	68e3      	ldr	r3, [r4, #12]
 8001b78:	9903      	ldr	r1, [sp, #12]
 8001b7a:	1a5b      	subs	r3, r3, r1
 8001b7c:	42ab      	cmp	r3, r5
 8001b7e:	dcf2      	bgt.n	8001b66 <_printf_i+0x21e>
 8001b80:	e7eb      	b.n	8001b5a <_printf_i+0x212>
 8001b82:	2500      	movs	r5, #0
 8001b84:	f104 0619 	add.w	r6, r4, #25
 8001b88:	e7f5      	b.n	8001b76 <_printf_i+0x22e>
 8001b8a:	bf00      	nop
 8001b8c:	08001e4d 	.word	0x08001e4d
 8001b90:	08001e5e 	.word	0x08001e5e

08001b94 <__sread>:
 8001b94:	b510      	push	{r4, lr}
 8001b96:	460c      	mov	r4, r1
 8001b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b9c:	f000 f894 	bl	8001cc8 <_read_r>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	bfab      	itete	ge
 8001ba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8001ba8:	181b      	addge	r3, r3, r0
 8001baa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001bae:	bfac      	ite	ge
 8001bb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001bb2:	81a3      	strhlt	r3, [r4, #12]
 8001bb4:	bd10      	pop	{r4, pc}

08001bb6 <__swrite>:
 8001bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bba:	461f      	mov	r7, r3
 8001bbc:	898b      	ldrh	r3, [r1, #12]
 8001bbe:	05db      	lsls	r3, r3, #23
 8001bc0:	4605      	mov	r5, r0
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	4616      	mov	r6, r2
 8001bc6:	d505      	bpl.n	8001bd4 <__swrite+0x1e>
 8001bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bcc:	2302      	movs	r3, #2
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f000 f868 	bl	8001ca4 <_lseek_r>
 8001bd4:	89a3      	ldrh	r3, [r4, #12]
 8001bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bde:	81a3      	strh	r3, [r4, #12]
 8001be0:	4632      	mov	r2, r6
 8001be2:	463b      	mov	r3, r7
 8001be4:	4628      	mov	r0, r5
 8001be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bea:	f000 b817 	b.w	8001c1c <_write_r>

08001bee <__sseek>:
 8001bee:	b510      	push	{r4, lr}
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bf6:	f000 f855 	bl	8001ca4 <_lseek_r>
 8001bfa:	1c43      	adds	r3, r0, #1
 8001bfc:	89a3      	ldrh	r3, [r4, #12]
 8001bfe:	bf15      	itete	ne
 8001c00:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c0a:	81a3      	strheq	r3, [r4, #12]
 8001c0c:	bf18      	it	ne
 8001c0e:	81a3      	strhne	r3, [r4, #12]
 8001c10:	bd10      	pop	{r4, pc}

08001c12 <__sclose>:
 8001c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c16:	f000 b813 	b.w	8001c40 <_close_r>
	...

08001c1c <_write_r>:
 8001c1c:	b538      	push	{r3, r4, r5, lr}
 8001c1e:	4d07      	ldr	r5, [pc, #28]	; (8001c3c <_write_r+0x20>)
 8001c20:	4604      	mov	r4, r0
 8001c22:	4608      	mov	r0, r1
 8001c24:	4611      	mov	r1, r2
 8001c26:	2200      	movs	r2, #0
 8001c28:	602a      	str	r2, [r5, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f7fe fcf4 	bl	8000618 <_write>
 8001c30:	1c43      	adds	r3, r0, #1
 8001c32:	d102      	bne.n	8001c3a <_write_r+0x1e>
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	b103      	cbz	r3, 8001c3a <_write_r+0x1e>
 8001c38:	6023      	str	r3, [r4, #0]
 8001c3a:	bd38      	pop	{r3, r4, r5, pc}
 8001c3c:	200000c8 	.word	0x200000c8

08001c40 <_close_r>:
 8001c40:	b538      	push	{r3, r4, r5, lr}
 8001c42:	4d06      	ldr	r5, [pc, #24]	; (8001c5c <_close_r+0x1c>)
 8001c44:	2300      	movs	r3, #0
 8001c46:	4604      	mov	r4, r0
 8001c48:	4608      	mov	r0, r1
 8001c4a:	602b      	str	r3, [r5, #0]
 8001c4c:	f7fe fd00 	bl	8000650 <_close>
 8001c50:	1c43      	adds	r3, r0, #1
 8001c52:	d102      	bne.n	8001c5a <_close_r+0x1a>
 8001c54:	682b      	ldr	r3, [r5, #0]
 8001c56:	b103      	cbz	r3, 8001c5a <_close_r+0x1a>
 8001c58:	6023      	str	r3, [r4, #0]
 8001c5a:	bd38      	pop	{r3, r4, r5, pc}
 8001c5c:	200000c8 	.word	0x200000c8

08001c60 <_fstat_r>:
 8001c60:	b538      	push	{r3, r4, r5, lr}
 8001c62:	4d07      	ldr	r5, [pc, #28]	; (8001c80 <_fstat_r+0x20>)
 8001c64:	2300      	movs	r3, #0
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	602b      	str	r3, [r5, #0]
 8001c6e:	f7fe fcfa 	bl	8000666 <_fstat>
 8001c72:	1c43      	adds	r3, r0, #1
 8001c74:	d102      	bne.n	8001c7c <_fstat_r+0x1c>
 8001c76:	682b      	ldr	r3, [r5, #0]
 8001c78:	b103      	cbz	r3, 8001c7c <_fstat_r+0x1c>
 8001c7a:	6023      	str	r3, [r4, #0]
 8001c7c:	bd38      	pop	{r3, r4, r5, pc}
 8001c7e:	bf00      	nop
 8001c80:	200000c8 	.word	0x200000c8

08001c84 <_isatty_r>:
 8001c84:	b538      	push	{r3, r4, r5, lr}
 8001c86:	4d06      	ldr	r5, [pc, #24]	; (8001ca0 <_isatty_r+0x1c>)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	4608      	mov	r0, r1
 8001c8e:	602b      	str	r3, [r5, #0]
 8001c90:	f7fe fcf8 	bl	8000684 <_isatty>
 8001c94:	1c43      	adds	r3, r0, #1
 8001c96:	d102      	bne.n	8001c9e <_isatty_r+0x1a>
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	b103      	cbz	r3, 8001c9e <_isatty_r+0x1a>
 8001c9c:	6023      	str	r3, [r4, #0]
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ca0:	200000c8 	.word	0x200000c8

08001ca4 <_lseek_r>:
 8001ca4:	b538      	push	{r3, r4, r5, lr}
 8001ca6:	4d07      	ldr	r5, [pc, #28]	; (8001cc4 <_lseek_r+0x20>)
 8001ca8:	4604      	mov	r4, r0
 8001caa:	4608      	mov	r0, r1
 8001cac:	4611      	mov	r1, r2
 8001cae:	2200      	movs	r2, #0
 8001cb0:	602a      	str	r2, [r5, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f7fe fcf0 	bl	8000698 <_lseek>
 8001cb8:	1c43      	adds	r3, r0, #1
 8001cba:	d102      	bne.n	8001cc2 <_lseek_r+0x1e>
 8001cbc:	682b      	ldr	r3, [r5, #0]
 8001cbe:	b103      	cbz	r3, 8001cc2 <_lseek_r+0x1e>
 8001cc0:	6023      	str	r3, [r4, #0]
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}
 8001cc4:	200000c8 	.word	0x200000c8

08001cc8 <_read_r>:
 8001cc8:	b538      	push	{r3, r4, r5, lr}
 8001cca:	4d07      	ldr	r5, [pc, #28]	; (8001ce8 <_read_r+0x20>)
 8001ccc:	4604      	mov	r4, r0
 8001cce:	4608      	mov	r0, r1
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	602a      	str	r2, [r5, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f7fe fc81 	bl	80005de <_read>
 8001cdc:	1c43      	adds	r3, r0, #1
 8001cde:	d102      	bne.n	8001ce6 <_read_r+0x1e>
 8001ce0:	682b      	ldr	r3, [r5, #0]
 8001ce2:	b103      	cbz	r3, 8001ce6 <_read_r+0x1e>
 8001ce4:	6023      	str	r3, [r4, #0]
 8001ce6:	bd38      	pop	{r3, r4, r5, pc}
 8001ce8:	200000c8 	.word	0x200000c8

08001cec <_init>:
 8001cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cee:	bf00      	nop
 8001cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cf2:	bc08      	pop	{r3}
 8001cf4:	469e      	mov	lr, r3
 8001cf6:	4770      	bx	lr

08001cf8 <_fini>:
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	bf00      	nop
 8001cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfe:	bc08      	pop	{r3}
 8001d00:	469e      	mov	lr, r3
 8001d02:	4770      	bx	lr
